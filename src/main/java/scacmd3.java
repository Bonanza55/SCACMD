/**
 Encrypt or Decrypt a binary or text file.

 Read from Stdin, write to Stdout OR -i <input> -o <output>

 Encrypt: java -jar scacmd3.jar -e -i <plaintext> -o <ciphertext> [-p]<cipher key> [-h] [-v]
 Encrypt: cat [type] plaintext | java -jar scacmd3.jar -e [-p]<cipher key> [-h] > ciphertext

 Decrypt: java -jar scacmd3.jar -d -i <ciphertext> -o <plaintext> [-p]<cipher key> [-h] [-v]
 Decrypt: cat [type] ciphertext| java -jar scacmd3.jar -d [-p]<cipher key> [-h] > plaintext

 Where -v = version
       -h = help
       -p = optional password

 If the environmental VAR is set then no <-p password> is requred.
 Windows:  set CIPHERKEY="f00Bar"
 UNIX/MAC: export CIPHERKEY=f00Bar
 To unset: unset CIPHERKEY
 $CIPHERKEY of 6 char or more required.

 1.0 Aug 27 2014 - initial release.
 1.1 Aug 29 2014 - add byte swap logic.
 1.2 Nov  3 2014 - add GetOpt logic.
 1.3 Nov  3 2014 - add four byte header.
 1.4 May 24 2015 - add -e -d options.
 1.5 May 31 2015 - add sha256.
 1.6 Oct 18 2015 - add cipherkey creep logic.
 1.7 Nov 29 2015 - add large arrays.
 1.8 Feb 22 2016 - add -i -o options.
 1.9 Mar 10 2016 - add block cipher. 
 2.0 Oct 14 2016 - add enhanced block cipher (even/odd).
 2.1 Oct 14 2016 - add -v option.
 3.0 Sep 17 2020 - Removed SEED, added keyCksum to fix array index bug.
                   Not backwards compatabl with version 2.
 3.1 Jun 26 2023 - Published on GitHub.

 To make Jar file:

 jar -cvfm scacmd3.jar manifest.txt ArrayH.class ArrayZ.class ArrayA.class ArrayS.class GetOpt.class scacmd3.class
**/

import java.io.BufferedReader;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.*;
import java.util.Random;
import java.lang.*;
import java.io.Console;

class ArrayH {

  static int [] HH = {21,15,17,14,12,9,24,31,13,19,26,20,9,15,3,30,21,13,17,1,7,22,25,14,12,1,30,27,6,30,16,30,8,7,5,1,23,23,11,3,9,3,27,18,5,8,1,7,21,22,22,19,8,14,3,2,25,20,11,7,27,1,16,25,2,16,1,26,18,24,4,8,30,27,18,10,13,28,2,14,21,10,24,13,31,4,1,23,27,15,5,11,23,26,27,24,13,11,4,23,29,21,10,16,28,2,17,21,4,11,23,29,18,24,16,10,10,3,23,13,13,16,31,2,18,24,5,11,26,29,18,16,16,14,11,31,22,18,15,15,27,1,14,16,1,7,22,28,16,12,3,3,12,26,29,12,15,15,30,25,17,23,4,10,22,29,20,15,4,6,10,1,4,17,26,14,9,1,31,19,18,6,30,28,31,23,14,2,9,25,28,11,17,20,1,6,1,21,29,17,6,13,1,5,19,25,16,8,8,29,18,15,16,19,2,9,22,19,11,14,29,1,21,24,12,12,3,30,24,19,7,14,28,1,16,19,11,17,30,3,3,16,22,19,8,5,29,26,15,18,1,8,24,30,10,13,28,5,11,23,26,11,10,6,3,27,15,13,1,8,30,30,11,16,29,5,11,24,30,7,12,28,31,14,14,16,25,7,4,7,22,25,5,21,2,25,23,26,15,18,10,30,28,17,13,13,16,28,2,26,26,6,21,9,13,27,31,19,17,18,29,4,16,20,3,18,7,27,30,28,16,12,12,7,31,2,17,23,4,7,23,23,28,17,15,12,3,7,30,19,22,2,11,24,27,19,22,10,9,30,27,27,8,7,5,26,1,25,31,11,14,6,1,24,16,19,1,6,21,25,8,16,15,2,6,29,1,13,19,11,2,29,17,24,8,11,26,29,1,21,16,7,17,6,9,1,30,19,10,5,26,24,25,28,11,14,2,6,18,24,1,16,31,2,23,20,9,7,30,27,17,9,12,4,4,10,23,19,19,7,5,29,31,15,21,30,5,20,24,6,15,15,10,1,8,27,31,19,14,6,12,12,4,27,17,29,17,6,21,1,7,22,25,9,24,27,2,25,20,12,18,6,29,29,1,15,18,6,10,22,28,5,11,3,30,21,28,16,14,2,30,22,13,17,16,8,15,26,30,14,17,1,6,27,25,25,5,2,27,30,14,17,28,9,12,27,30,27,25,5,5,3,29,30,12,7,1,29,18,24,1,13,19,2,8,24,30,10,14,29,12,24,21,22,17,1,7,9,22,25,16,11,11,23,18,9,16,10,2,25,11,12,10,31,29,5,9,15,15,10,1,1,21,19,10,14,28,1,17,21,2,11,24,31,29,3,12,12,18,1,16,28,2,17,21,1,7,30,26,18,18,9,4,27,26,13,29,12,7,31,5,9,15,30,1,2,23,12,12,12,10,30,26,17,20,8,11,29,1,24,25,16,13,10,6,19,4,16,19,19,14,8,1,4,17,16,20,6,11,1,23,29,26,17,17,9,12,4,24,29,29,30,21,10,13,1,22,28,19,16,14,10,5,2,8,23,27,10,14,6,29,16,15,22,1,5,24,27,8,19,14,5,8,24,30,7,10,25,25,23,11,14,30,1,17,23,20,12,3,30,5,28,17,15,4,31,22,31,28,23,12,1,5,5,2,25,21,11,18,6,1,2,4,11,26,6,12,24,28,11,12,15,6,7,28,16,23,14,8,1,5,20,26,6,9,4,4,17,20,14,18,30,4,4,31,23,14,3,3,24,27,10,10,8,3,28,19,7,13,29,1,23,30,18,17,6,3,27,30,10,17,8,3,19,19,11,14,6,12,1,28,18,19,10,2,5,3,27,15,13,1,1,9,24,30,11,13,5,1,23,19,13,19,17,31,3,15,21,10,17,11,6,3,27,15,14,2,5,17,1,3,9,1,28,20,23,14,11,6,2,25,23,12,6,30,13,26,1,15,19,30,31,17,23,23,15,4,11,2,20,21,18,7,4,2,28,11,26,6,12,28,28,28,25,25,20,8,17,6,9,31,31,31,20,9,23,1,1,29,23,26,14,27,9,16,28,31,19,11,6,26,1,12,28,10,14,27,1,19,22,14,20,8,3,29,23,22,6,1,24,27,16,23,13,10,1,1,24,17,16,23,3,9,30,1,13,19,31,1,5,18,24,5,5,11,1,29,18,10,16,5,1,24,19,22,14,16,1,3,23,23,25,23,11,6,1,27,16,22,8,31,26,14,12,9,4,27,20,24,23,12,18,31,5,29,17,16,5,7,23,5,18,24,13,12,8,11,8,8,20,26,7,9,1,13,1,1,22,15,6,30,4,31,21,29,9,15,7,27,25,22,26,10,13,5,25,21,11,15,4,10,23,1,23,24,6,7,28,25,16,8,12,3,10,21,19,16,5,3,4,16,31,19,17,5,29,3,17,20,3,6,6,28,24,20,11,7,3,30,21,25,13,20,1,6,4,30,27,1,13};
}

class ArrayA {

   static int [] A = {339703,350529,200120,672235,247470,500932,973074,494229,105627,602842,379800,885380,896519,402100,938310,889558,56686,936909,932574,282167,201386,854589,335097,159494,87079,428305,64802,116145,852226,758194,445783,7766,274480,524486,490089,149804,268895,666523,862450,260079,388490,630130,891283,297279,967835,173114,772937,14578,289658,220724,767353,164982,596050,745770,969917,123794,234519,173951,901667,363221,271718,183498,246987,229997,561479,810785,389025,536389,172886,512954,811277,210761,221900,475362,855583,788702,372303,733259,767895,486571,653698,315268,379302,636974,960090,44972,517114,133956,153461,136471,928955,426170,303864,558723,39231,715931,585259,732624,310863,302240,891651,990521,733115,230331,580201,447199,149817,455526,838099,88106,223929,752447,675122,192379,716914,114543,583396,137013,247738,489378,516549,70167,806248,47889,405364,711072,282801,560712,790956,212082,439771,795874,178449,492523,550046,956041,597397,784738,356466,506186,639303,605887,742356,83583,259077,504173,984680,992773,629269,257374,106965,760168,371566,868781,413357,26433,576568,28948,407622,748848,668067,329636,427135,15112,583185,236389,716896,714084,889577,230804,615182,636364,991487,871710,281187,630779,172549,678130,214340,232779,399906,496084,92605,398313,673393,915033,766975,539247,339398,589404,473109,845639,520459,301097,614042,394680,55269,461263,212477,454117,209937,141003,322752,609228,370103,142374,503814,156368,660968,416813,175653,729269,246500,644129,279925,294799,461926,519271,569686,552696,102833,69417,236544,141866,692001,305076,785584,657441,207577,456883,143271,640485,725660,888455,268677,148901,97374,413502,449739,111309,653078,554804,565943,532527,82663,735866,747004,574026,52178,219381,778240,138104,368348,780154,360248,132520,523459,653407,982334,862558,873696,753920,275953,997562,572797,564173,543359,526369,338591,543062,283223,688517,263752,885192,887965,237558,152567,410239,587563,762604,823633,601063,179303,749905,743612,985252,877323,683059,577093,818733,448719,735194,21141,782545,904136,612789,623928,105807,248142,607053,529728,941534,7424,779695,610209,678031,274551,672180,791271,188900,833062,74703,432177,985794,721877,963517,982321,103293,356781,185388,735523,388727,399866,366450,541943,947237,394281,415463,338838,836052,847191,188418,107637,507120,158747,902712,477947,358170,986300,10760,751842,618839,263002,660631,746257,143886,688376,838096,574179,305242,844908,433393,939252,286991,922786,299407,480841,878469,206445,511309,459783,965363,437506,558920,883027,86903,414878,895480,397184,168052,864005,480847,444794,842422,275848,475263,284084,799796,536400,814763,951232,229793,710301,323376,373485,738208,621913,27908,138633,296719,782079,76922,673441,710605,776494,174124,605191,2821,73417,910619,666439,155899,253398,774110,109230,414939,480828,878456,309525,81796,817878,59519,194184,974820,112857,977607,997112,246419,30538,137774,222949,472255,538952,817513,837017,820028,845344,458419,477924,460935,253420,594646,775950,767327,239469,397469,472677,837400,65790,563004,646577,143793,624300,237375,904475,254068,38187,543767,554906,132472,884128,290123,400848,554724,58030,758315,574749,972377,980308,130029,240754,646749,966357,372353,547146,953141,104170,476700,899401,49122,629215,614437,325421,879038,342215,904198,170912,12811,648607,890247,651122,718944,537422,156512,73375,471004,531837,85455,971767,234993,863123,212716,879816,377031,857538,510742,686235,679881,68469,721672,483355,310377,102862,821537,988664,600138,742472,633563,809056,775640,534661,875886,803472,572535,209032,550258,725751,131047,195081,856650,23778,19862,763913,161543,280633,178235,177528,414168,745650,430861,67357,206356,381849,838935,375146,936285,170938,12837,115196,250648,421831,771423,519181,420239,595732,562316,693081,306157,951018,90018,51266,300572,623687,615064,87206,708647,757460,521817,2325,874181,957755,454970,935477,548552,846570,95877,568018,229588,396715,746307,374437,32411,607645,347011,674986,72615,741570,653403,835152,232782,663849,813570,385298,668768,642738,407902,729213,626815,963156,268866,238733,153429,448549,61624,542131,39347,589482,994776,245404,532331,543470,739612,961490,717335,478210,31828,92661,421867,648452,649146,124744,530739,641464,539065,119160,516788,549512,213437,279326,676954,694212,91841,671934,977643,16179,170055,897771,147778,534118,928041,464252,588788,599927,105508,267076,608302,369985,158860,29141,434436,45834,838394,687985,349554,858418,264414,584023,733743,280671,678300,744189,155996,662341,378392,858899,961537,972675,478257,854268,752429,771934,132891,613398,862704,194187,691401,138445,635659,336225,801677,585796,925420,100214,497843,703294,655051,259085,787604,359332,765326,188029,346115,917842,323837,990851,240858,362450,815637,90717,644334,132508,374148,765087,778106,413903,663909,678504,84499,220322,805946,352875,186408,78479,228199,347290,744919,122786,34619,236105,385825,137039,909761,920900,170207,443431,519946,539451,55900,67038,408264,583758,236961,929015,294182,617298,122879,595020,459717,791199,288414,768921,867792,57463,929320,409828,548827,724320,65547,445768,223198,390325,706453,490572,217613,564226,905452,508484,566198,741692,708276,467296,808522,727741,389311,17441,482893,650020,549477,332752,894735,161449,229217,566954,808594,669863,223481,172658,734641,1355,781991,469579,875574,484869,634589,181219,986954,418022,190294,373185,926802,576524,868055,928889,78610,239225,801208,19428,800064,855231,261226,207596,613591,254947,816930,68614,716759,735564,289182,399907,641546,777064,688897,434742,207014,638081,410353,990446,176529,826250,598521,739115,544851,835061,615698,718057,280041,440657,813187,64871,314877,956232,736869,372666,567114,833827,614464,302053,82690,243306,334625,775156,686989,822507,128216,354801,752429,435616,677256,787981,341598,991320,388949,78975,320615,384147,533867,223819,440360,707074,6972,225190,787173,428529,834524,814358,186889,861709,167419,394003,791632,441354,682994,207530,159287,278377,676006,902590,208300,368916,255651,313174,127276,768631,330615,710750,491388,602113,382750,18547,318444,721858,119488,346072,899689,68672,355147,421037,193308,468387,274123,681,272979,441961,261875,808503,100035,375115,629529,473105,689647,850262,256258,514605,672691,314047,564053,279178,651707,326528,888511,990870,240877,882232,182130,851833,93474,743196,515467,407538,699069,454889,746420,973004,214645,489724,261996,897792,711894,822618,603256,821474,195409,462122,298318,814486,376470,881070,167546,283995,351817,520799,918427,873163,270792,920514,474131,700716,850436,11053,553749,845560,218091,328816,142918,846932,252927,243935,115792,908276,299394,218613,214697,686838,567061,734188,614412,266039,927608,502843,331450,342589,683815,859308,731165,523650,881303,900808,302336,827679,810689,360826,766120,246628,923328,465098,930550,966788,438904,14139,894362,430572,310796,321935,837278,840050,271650,594765,474989,947130,452711,258586,545061,922927,320557,970278,211919,103990,876260,10926,825027,396756,769285,444106,6090,797315,889085,844666,489604,969411,211052,346570,258403,10912,922744,174123,415763,559952,957580,107276,913011,493105,265377,563213,116831,712055,26130,667486,448123,19851,214299,596872,377510,261214,41852,202468,89203,554832,960827,718043,23753,134477,399614,82801,636418,747143,988782,865518,144833,653895,434533,889241,442859,22953,314484,989864,89695,185344,212668,629850,835128,727199,968839,243919,984128,720211,961851,96517,877153,760858,541496,652221,58216,160575,722557,343018,16263,874869,680604,799695,197325,308049,861666,4698,813330,979613,129334,192867,746483,68756,254837,953228,350858,476713,634799,57502,838138,565855,346493,573077,872974,756679,906399,556122,797762,533844,306116,853043,625315,205409,570976,589781,370418,942145,348141,105357,667340,239068,19706,180321,67056,688674,2750,296525,702520,648890,54885,394987,636626,747351,144980,444000,216271,796365,568636,843715,397333,508058,905686,140638,326719,962515,743153,9867,66120,793835,322354,598830,977731,83597,222596,348198,345386,381623,952299,477643,949759,627780,885453,427223,776815,959073,41518,591653,88868,255995,505302,88902,915923,441267,540137,871619,743476,223985,95842,271335,55087,493218,546809,569770,375506,922134,727870,902663,683301,63438,844074,4691,785327,357055,137693,560394,374497,592715,998710,109435,193630,337819,579459,229181,626809,853394,274520,924242,321871,957667,257565,368290,148927,992503,773140,195843,976479,622243,771964,376850,182586,464504,270240,701308,473579,53674,825944,509131,906759,619140,439053,574571,972199,926935,504050,614775,809223,652799,553064,608230,388867,960595,741232,7946,196690,40267,820903,243606,543503,115231,895868,94159,815135,533444,683164,357985,886503,22328,272334,913689,701895,238106,735320,285457,626683,157082,810285,360421,340978,483312,882795,893934,774157,558276,438500,605627,71080,73853,331525,392555,534864,56897,937120,948258,33141,109949,451175,520571,769877,43103,434220,984355,441442,77939,949795,533396,186600,197738,538964,458183,940062,238386,471913,738626,933074,231397,597416,608555,973721,984860,890181,188200,685414,574029,445886,621379,145657,938141,673243,215572,744091,879914,129921,887136,293131,395490,957473,976278,226285,701882,951888,353695,701433,185397,335117,454208,31323,603050,165034,299699,141598,25303,972651,991456,170431,750525,66202,517638,923632,87254,401328,137411,24146,261154,19784,935351,520976,38405,871937,14969,568586,360227,291293,402018,555894,719515,877601,41521,258063,440880,86923,689954,720607,793007,476080,87478,952227,432736,55281,66420,71974,169473,790914,458014,424598,758436,269829,304465,77188,863712,79061,913486,366673,496631,363629,761232,673065,223898,785881,488499,908671,959087,464669,475807,139862,468789,202344,838839,836027,941892,186989,206494,571660,364145,861360,997829,89600,561741,223311,859807,199875,951088,130064,157235,398875,882838,124479,515418,821127,34639,765385,813444,407435,916497,863846,282953,88689,668782,515089,331523,517605,364948,614954,862283,697671,840006,987371,154499,504091,40301,36385,578154,83736,555877,61458,603227,309051,93170,28952,984531,242204,299132,704426,879920,800446,592931,90147,640282,981508,855891,509095,165329,622415,274042,17511,592744,220850,848979,198572,773806,361783,897993,239219,414713,67916,79055,576269,159870,102752,128069,492792,401289,807284,379012,159649,830873,392857,964584,370579,793281,943001,53727,295367,60949,458577,836443,536730,170925,951562,523290,929284,467847,873841,931364,245440,512153,292791,864518,270513,809075,958795,125079,311161,742228,755247,865972,15693,705718,111713,403525,776054,886779,292775,928570,334566,91782,341788,711288,117283,758639,8646,76046,473674,675161,72790,372968,770596,856222,5943,141766,922403,460965,866960,924483,486467,505272,236018,449530,434751,206262,603890,214589,456229,139416,537044,395650,793279,28230,319761,955557,842292,438813,252915,980630,509150,511323,164527,645034,142249,473731,723037,734176,191263,823490,256485,843090,359539,258121,624139,252270,601862,888616,256590,307006,868989,887794,511040,238756,19394,346633,563175,198972,596600,308897,343943,395653,80918,606153,952289,958518,930012,880981,374632,798737,798226,261356,987838,323279,446920,452464,667202,22523,185523,298495,851160,791717,203526,692399,343239,545234,300971,618979,576943,511942,997696,546573,600850,183192,724034,531148,286886,49470,23861,240089,660705,102243,546003,386581,477937,765340,845828,945182,388942,798017,139944,261282,901711,106604,214045,321314,44145,723569,694752,871649,463032,543152,894992,304920,170965,328774,291901,257165,851210,566996,393064,537954,981013,673068,520025,337819,48828,350122,442036,811283,451712,408696,102327,871314,809343,882575,954049,174975,769019,98596,65826,581851,341798,808128,614956,730591,804568,90117,683354,390882,652457,283845,883593,454217,962045,997330,184816,647945,170905,50201,805937,538564,164306,357935,213258,576801,19861,799571,307400,656898,369276,80459,529381,544275,552131,428675,725982,433510,968489,170485,896881,771319,378733,203280,638673,965047,453642,636550,363032,942021,533404,164792,919233,368131,375987,949961,643592,856850,143771,614959,575732,344720,282749,620691,692165,757101,351146,544465,890600,999922,726404,662104,197084,312718,12053,984221,14948,864286,863775,539999,514390,533467,158201,268926,704319,778575,557917,34075,371845,215321,76507,158175,132566,496109,39455,607726,316823,680366,123427,103961,78352,396360,404215,567835,952198,65171,25944,982927,602070,445546,508959,557163,637003,629803,973277,953811,653146,246211,320187,178198,644755,388644,661575,891566,673606,36343,622021,926499,686446,627004,226753,584737,766207,476554,669618,186595,825476,400571,994615,290728,298584,900013,965624,823635,897612,490676,713977,286405,37986,881461,475506,299245,637014,480490,722130,168773,535797,279686,211204,441195,726718,256164,427224,101486,910976,432055,781088,224481,198872,653635,413582,297287,483224,498465,657581,967922,75364,182633,150512,869608,949448,818022,164159,584497,583986,532911,259394,953049,833273,202520,373580,986579,928507,317150,291540,701468,453049,417068,338817,13078,822568,935540,629171,615410,572026,183424,157815,607018,581409,216219,182243,858466,866322,601845,781271,771719,456984,200874,424175,578528,810849,793238,190867,995318,108624,943732,537777,743671,709696,73240,616585,704117,778093,141637,215614,683491,277536,236872,355988,153333,272449,227077,821121,994709,721192,84736,763111,73453,899521,668509,362140,100470,424062,267538,861582,806992,212987,161912,161401,210305,656027,425015,604441,323538,776360,139904,114294,932328,412558,527385,121430,417542,61478,71663,639902,620437,694414,215493,394919,114016,537195,314549,41031,251001,151969,515512,515001,677020,651411,519985,114030,926947,465434,414359,132475,990485,64463,216459,387519,344503,187459,922981,305479,715407,466988,930117,904507,314436,933524,191619,892349,716895,542964,417401,866020,104378,698422,285623,398928,282706,868384,870655,624954,892110,486155,722211,696601,131628,620223,321239,320729,525621,229014,487108,410260,648616,623007,77771,837717,247645,213670,206470,512178,922106,410701,260040,111207,935753,9730,778717,362655,567547,561333,924068,412664,566317,574172,473206,104422,917339,136742,505289,99334,358977,110557,474100,173435,741706,712889,562228,5288,673845,681701,999708,974099,679578,890560,849895,969011,273490,822699,72427,37410,242302,38720,48905,807631,299708,545450,8580,974604,417997,94588,628443,222488,855920,449965,227319,406745,355363,462804,418240,269407,361095,335486,658200,666056,75984,556213,726598,905572,210051,25557,761079,681723,420053,730675,226657,23471,201829,907026,742135,869618,799453,137224,848207,847697,523230,585943,329833,34331,239223,833267,710207,53681,423480,912075,886098,612581,437127,21998,280092,209720,3298,244938,571312,59907,361882,221416,584958,431915,494349,704169,473157,67202,593141,178820,541555,135600,965149,184552,386038,729511,73318,147295,35910,109887,934432,271395,15285,609329,108867,702911,323577,403417,863883,863373,78594,912127,577477,303959,72947,252374,613254,84075,827964,632748,581365,589221,140675,316450,419508,598082,123318,469454,152335,752083,740284,714674,124603,876183,891077,898932,723478,166539,449588,49337,21505,472931,322270,973109,181372,326092,376255,193957,285645,944850,425358,499335,595233,700819,649744,376227,549815,143860,103195,183035,271215,484106,807221,225183,413001,478611,842154,817547,14074,608118,970853,308624,613102,620957,569882,802203,146009,620287,822282,896259,57827,237254,981142,699872,92760,206065,157034,751079,841113,807137,164170,138561,963106,344904,122259,417545,972286,497101,852277,78787,383265,502381,345857,459162,315405,686639,430529,609955,839945,666014,29557,128633,438974,165456,792816,386861,468529,442920,391845,880440,690108,450056,193945,995069,719222,164945,900467,908322,162262,591054,647028,223634,428526,14205,643236,617626,689381,183032,990145,989635,814181,756109,525097,765785,498412,597487,341377,935421,901024,858988,460333,459822,621842,110437,365220,58851,220419,294396,657939,110762,779319,853295,216839,216328,272898,942437,7732,949659,179651,259491,102966,222083,560025,639865,227066,234922,246060,47185,150749,158605,575043,912005,349585,998380,939891,1276,745164,701781,906673,500718,369292,95774,505702,505191,84181,810662,40654,734284,178323,736799,363976,568501,531044,538899,64688,297008,279397,253788,325543,110446,379406,6916,427254,765024,127760,102150,885424,645371,380895,74526,798677,888453,632343,739784,206115,438435,482087,987108,697804,362173,161621,269063,217680,779663,242793,728077,404301,378692,363126,957170,914154,493322,237211,344652,387852,972723,88358,62749,882827,996132,393736,251415,694806,669197,876052,369703,932811,683172,460526,906248,666869,641260,590185,341766,54352,648396,607731,849371,636748,602773,747662,573731,909170,983147,816060,749622,987979,582024,911294,282530,587007,181053,535422,261904,560227,855513,599403,556019,275116,454542,606538,606027,768047,256642,263431,857475,914045,18985,651720,244958,69504,318810,532068,818988,538085,503067,238591,621088,31017,519611,776357,220117,260110,745394,755579,935005,164997,858627,408763,7812,731963,326008,685084,31221,446852,32531,661562,635953,296145,889381,596909,275285,436705,584178,953424,172128,25874,843576,495600,542977,311965,686097,367880,750378,371997,346387,703419,616548,579397,663136,557311,39395,644027,387496,150780,377289,56410,3004,848100,197133,810132,246085,398082,829626,409161,446974,928777,897464,708979,711131,413749,388140,583624,113744,957219,959371,538906,753841,855298,681366,286000,29522,773411,367456,71675,798157,896406,138047,442525,981011,744295,36927,649925,237459,289169,218062,978683,947370,528760,911257,827024,5945,250421,443465,443030,308426,52316,737580,537172,230803,218445,186324,10870,293082,285882,879926,78308,663986,915568,142078,827061,857713,853721,443300,642488,235725,24450,690623,992204,991693,209812,541770,906775,280907,644450,768318,231140,818673,994167,59778,142146,752617,120060,338203,14427,396924,651707,875969,488968,971052,944426,134263,844345,670414,666422,542,205433,957013,314046,819067,272871,858549,496341,822436,546696,872791,722130,204215,964835,558880,389764,616273,737864,767813,167019,174874,374063,185954,707032,891165,129523,503654,983210,365708,922304,401886,809456,158490,391143,817571,767448,841425,777124,376173,365074,847157,678810,264489,681822,30856,587452,67034,127110,609194,213827,267923,818058,321645,57168,691784,15352,545472,258057,260209,256217,215730,359360,420969,539501,69622,887656,270154,365748,919364,81385,672766,824762,634253,582871,170405,428498,21736,215365,564397,546787,512811,552804,839677,902811,713407,567154,910627,373757,348148,635551,127899,589174,277946,582424,31347,990682,373180,297313,48894,787079,380316,140938,202050,562930,697434,787772,229285,750364,929790,386801,833530,378612,837503,50062,896224,39855,163723,362911,341426,289900,738519,456968,208549,858270,824294,486341,974936,828174,447317,404301,886385,291453,740072,197083,784616,84236,466733,129223,278997,530579,757088,855882,293239,975866,83308,793390,983227,346771,573280,808129,190628,891644,109787,722786,595903,739533,130725,955270,437354,958433,668491,750859,716883,744108,470591,290670,370510,366518,848601,664782,632661,333226,245511,483868,832900,922784,461271,609760,511626,355101,434942,47941,147016,729213,190402,795034,488666,232555,786172,342769,830716,417917,956403,376967,351357,756425,615958,195493,400018,396026,259263,702655,668680,36123,868054,595770,978268,441398,971517,20422,516035,285023,849502,714620,258829,527790,925869,320215,914259,749369,975878,253758,321580,902968,497013,101647,583730,433069,814867,427866,654375,590708,120828,269318,802100,446636,409764,608145,627371,849249,851400,430935,176502,433948,760043,903673,277805,236716,730367,954653,519133,827118,633305,237939,776424,28008,425636,243671,106909,713470,892896,405610,788107,506252,416484,606499,988996,985004,733233,337866,149757,887942,426429,406264,380655,648663,486460,314906,853392,77374,395103,416209,20817,278263,496405,739621,122120,821075,99637,56620,609393,866892,184622,903070,657003,808999,27143,811712,194211,601781,81363,538373,986992,658356,256301,869299,95809,222961,225112,93686,467818,635396,581990,161525,214543,618657,328715,941713,159857,47520,430018,142603,360746,364269,720372,950363,918242,564508,663584,276583,830651,608005,826148,866141,248639,885730,479775,528679,222310,521928,548173,737538,547029,324383,328732,770161,76520,321246,172413,527589,635031,859012,77156,905600,288098,801118,175251,6904,310365,587692,499976,104610,188349,496334,816725,421359,445640,697223,509921,44931,916788,694142,976353,650743,680692,815357,823212,502333,504485,698006,990637,603636,721800,223647,91940,451016,453168,26192,408689,552319,498069,641699,765566,726814,366283,137934,739085,93455,467586,149370,95963,675497,254665,658779,842687,455687,81937,561493,943990,656576,54205,411237,12389,773010,370954,847053,485126,89759,690910,47943,67169,509302,891799,1421,869713,726465,794738,970231,493840,587579,299884,701751,75884,390124,991275,18501,392632,224286,348153,119804,812175,425174,379077,845407,363254,187800,561931,143321,570654,388689,762820,758828,257339,489992,298224,606208,988706,806741,399526,807097,189595,155199,623912,775908,273567,509117,940661,59194,5787,784797,133831,229425,223210,45727,428225,910027,534030,147030,228981,678771,121832,204200,624443,960225,579368,407814,984874,34338,628382,826762,315358,508035,482426,626056,792890,130184,511981,666334,304407,42593,627463,84474,53161,45961,950723,663309,995267,113800,151613,983265,726787,878783,243951,823485,442628,180006,781157,24374,862171,544798,512678,125677,664715,816712,729840,286438,280223,548232,774741,33089,259598,623141,288276,892908,324453,476450,14936,233144,885242,808800,816655,960285,445643,657097,525391,857630,629901,37472,905765,354410,986778,138775,441168,45802,578584,674178,587307,777321,623484,306112,788195,611482,778316,272894,958158,823276,172310,473783,311580,398808,311937,793739,2972,146602,472697,110489,634905,347491,196551,522925,597853,995558,707863,579099,117586,158123,901644,53642,346272,570559,346932,714375,932517,750552,613790,391144,126300,573343,211416,732494,938983,551982,551471,233255,615752,970121,555800,807383,33892,752340,341919,91076,912284,484712,929151,539255,868006,402921,934895,517093,999176,653701,360950,662423,631111,889901,377848,60476,378205,991203,109369,276496,758579,128111,343808,345627,425468,702148,920291,183514,226215,258635,776141,454212,525686,238272,151400,826220,638919,486155,390917,761567,515500,966806,926320,642412,835456,956149,966361,61955,444453,588083,294598,346309,294955,608103,853199,738054,170443,718673,737251,104695,705846,746942,370188,357830,886907,362428,752895,216025,590156,253047,321320,488447,970531,802184,41913,805196,406348,118934,657419,6086,607237,376225,76963,326042,918057,531057,757566,106232,886869,755443,348228,599811,243747,231388,664977,347605,935138,392149,296912,548494,255095,967680,905907,868450,571844,502632,212689,616804,65423,775505,313992,784228,166726,248244,849395,1392,14107,238393,50284,732911,115409,769089,63931,453728,391956,71077,705692,85663,559380,424498,134555,538670,912801,271878,654375,477970,760181,839743,321827,871962,359210,594760,36716,188712,198924,755520,138019,920232,243825,856823,869538,21535,560574,173573,86702,182296,954566,772601,155099,928946,155456,404535,465920,453561,466276,698929,567223,29093,567579,385614,986765,286384,102982,270110,931947,865255,864744,292664,476797,254151,433577,38211,764692,227822,445965,158551,802486,761821,135953,854401,164970,423064,10598,215490,597287,446626,829123,274561,243248,120188,418682,500350,882847,246391,312002,925000,683728,602946,710388,909576,909065,752541,148569,914049,508094,868,219011,529352,603329,374979,490481,53590,549203,318191,534732,988535,624105,842222,476839,775613,260898,320975,389248,837892,61194,285175,293031,997249,121926,583111,657088,441207,686863,269060,643192,355777,751804,995020,221530,6101,544586,688216,130172,848620,297240,4966,231475,530250,335986,665256,203743,651842,25974,396624,520492,719680,37410,566855,535542,725556,264043,469793,338087,98709,792339,944335,335453,429192,241083,12733,542853,834739,435891,948911,323043,902577,334122,16750,490467,947477,338291,872145,360741,427582,545746,541754,615731,370649,454389,450396,363525,173194,774345,25928,564414,788701,862678,858685,195757,78358,401052,78688,199207,311335,647702,10438,572193,374755,757252,16805,10591,168843,551340,233968,171351,784350,282861,579582,547462,998768,936995,523092,902748,99275,12404,369435,595944,830794,213293,441398,979884,992624,285255,542701,866043,51055,533138,240864,433909,959229,755647,388383,926869,963558,901785,755023,356175,969174,593177,963827,495802,123933,472965,976666,995244,815323,664384,724460,778556,391555,395904,391912,221366,129972,512469,723923,592216,72078,288620,340330,822413,540862,799542,556758,402921,601302,620528,869608,829031,390736,852884,504908,94486,687550,169634,806130,311152,271159,202677,510662,636799,93810,581757,955863,329995,294699,749181,57167,783002,982191,630026,592569,245773,110891,79578,372685,599194,278315,224909,318000,446574,59574,127847,9391,547877,479116,861614,740911,967420,349994,568137,250764,838297,917858,299657,951680,920367,118748,400960,231843,700557,221636,181150,177157,809526,908320,780177,932174,781234,129048,978107,715485,628614,861267,72900,861624,81622,280811,219038,916287,779524,597559,127680,671304,645695,502446,726708,616618,695302,299936,732324,414108,846496,550715,363414,79506,528125,132759,5176,899350,290468,903466,610716,912189,391770,323010,705507,388135,441378,585008,552887,923537,73312,271693,872844,124427,274201,73793,369079,245568,369436,976731,444637,496348,345408,57993,76572,288025,662157,805787,393320,763970,393677,225330,414074,868837,301227,559648,194264,493883,300070,913069,925783,288068,31590,644589,245741,168913,137600,836007,749136,290906,617001,957545,31523,803173,407781,12414,344373,595955,878166,706612,675299,813118,194916,394105,862010,888622,229849,842848,989,382420,608929,852145,340093,216581,340449,953448,21722,903265,441752,488851,491003,750645,977154,212705,462011,764292,732172,811733,309392,961414,930101,692578,41612,748493,180882,274621,494619,794237,978370,329284,192522,945030,947182,190399,408542,710015,678702,291702,188732,871358,458892,290545,820665,810161,723290,55530,648315,800311,907548,512181,144550,140558,589177,299260,245853,307982,690480,771997,373149,525145,163218,873300,355384,317927,905460,836248,713015,66281,440412,739186,171576,648323,171932,784931,183012,899103,273235,856893,344841,718947,345198,958196,838420,243489,944226,557225,155170,934879,161389,404605,736781,480670,224193,211834,645423,797419,922095,634680,746726,988341,990492,694712,233199,603848,307242,67864,35743,406393,564533,268753,869904,607282,731958,588709,650094,544268,829936,548384,997003,993011,931238,43367,67649,46380,647531,260530,384398,366336,848419,992049,360370,511667,480354,226199,600330,662459,664611,808241,125971,277967,396131,443632,496875,179502,47796,979034,128809,866186,92696,705695,577552,349203,869215,482215,331275,596387,970518,649639,495802,278016,652147,109158,343183,495179,812908,425907,913854,499652,468339,24936,407434,402590,629099,242099,254814,503893,452539,973618,356117,179711,117938,912918,139428,927504,213173,445826,146564,446182,47334,865368,247867,601014,827523,176190,558687,546329,28413,277492,759576,747217,660346,886931,366513,836748,375235,362877,786055,502147,950766,407777,346005,785431,420048,99169,37396};
}

class ArrayZ{
   static int [] Z = {765195,979521,513484,188024,644633,52032,48293,429387,70744,478141,988607,333340,919837,159673,64715,344679,425446,333664,5029,688836,606507,350842,761721,522317,447096,883048,788090,948427,29194,425018,844264,968239,554737,373699,114386,402716,888927,325580,350045,919135,812609,249263,401512,70997,238720,583452,432588,612966,895152,75531,372902,397292,835467,171834,755761,476738,20363,44753,94216,911214,705102,993432,404312,344838,542623,127296,538175,982494,312717,692967,112213,993832,236400,166515,833668,337990,776973,939468,819717,815801,391035,801889,274032,98697,300692,803466,708507,939424,135469,813572,705084,885462,99280,279658,178836,451134,591358,413521,932352,968005,173457,362201,358462,285769,184796,529528,332684,7224,523249,867982,659208,947538,741426,409952,723748,333520,291762,727715,149858,273834,232077,733125,881019,371074,335020,206877,62028,497980,942018,429763,759985,39950,842204,864238,700300,889044,268314,704967,867627,275026,503974,917075,675450,864194,555441,857389,225786,562152,586517,610906,510084,938371,152189,551221,350813,924980,131132,189582,608827,732803,938954,138262,393153,283139,389005,305589,716469,815346,329319,245904,475696,871520,471547,751511,711356,477116,279370,404190,137466,161856,335545,52258,193640,712191,761654,486733,997198,652505,437257,6348,991741,984070,519329,344802,341063,621727,960315,886771,306017,677901,16491,827085,576138,112377,598588,2779,288328,699182,461009,235135,384577,887350,993216,883202,294082,329735,543552,723930,572569,647498,347111,994051,165303,726027,939844,766271,665449,689838,233463,569830,418966,988055,881530,70275,359280,772381,722258,652372,63253,314351,272594,708547,897912,434151,236406,294855,487081,483164,650292,424418,310226,126525,84768,208744,627989,646139,604382,728358,633399,864316,53989,333953,133545,157935,546068,890800,401266,189011,394462,831114,827376,240478,405801,750533,483809,296652,510470,558356,777427,416452,919947,100326,741682,550314,760676,196629,582410,498995,292883,719428,660939,421536,371412,815731,849108,293427,491212,225210,530640,835396,885559,165524,965115,301483,325847,598145,718632,843452,711828,148481,658946,651275,831627,12006,925210,105589,699752,355059,351320,540064,125862,314606,496292,651572,857023,426114,836993,703039,945606,283828,694707,157353,495942,931894,351141,116901,61614,358005,944609,826229,940461,220426,20018,774910,880775,408594,358471,340377,290254,529537,525798,714542,855925,955646,466112,498868,909356,34176,553008,577397,849670,974490,123843,156599,702268,47001,43262,698568,136744,473110,991942,264240,133460,529285,948530,189219,189635,963760,218652,533376,483253,277217,76809,512761,718912,337050,173111,947237,3212,856664,647890,58745,517014,282775,338749,899472,866335,41550,642777,823155,522769,465206,617455,54109,330591,47304,304547,110283,872561,103479,108106,388770,438233,397097,31789,999072,272893,461637,227387,732968,577395,595834,6714,139056,311742,747695,172645,353023,221399,512930,213292,887831,529187,809851,328684,100955,695118,467389,102082,282460,417977,690275,214811,395189,44911,623428,263824,684950,326306,671038,773397,962141,235962,672614,806096,986474,686087,761016,357537,381926,687664,24031,823622,811339,736677,558839,872635,730315,794655,560416,979661,911820,461956,741920,253086,133310,568982,393647,46678,598490,148627,488449,499588,779552,962152,834009,253256,927709,33575,702251,219229,837365,787242,667466,326254,322338,808549,997293,17052,100347,479616,260254,18628,207372,909029,689667,200133,980769,874244,796692,907417,982345,797819,603555,88923,81251,722606,3271,382540,82827,361740,542118,652843,925141,574863,135588,554833,426691,540922,936746,828258,708481,950400,236068,136054,527171,641402,629120,296274,808962,350732,639062,688829,349139,463371,671145,673918,210157,498207,370064,661226,27246,977121,196385,980503,229810,249315,685267,788326,668549,154761,43452,103653,305724,328685,51660,149159,387094,406599,655905,448391,945605,965110,438623,231108,480414,22184,935871,938644,818868,25020,750650,543135,884361,877616,227209,229982,735562,58679,77117,549259,429482,348701,1905,46508,575189,402034,955650,66376,308016,991202,700754,272482,53120,810335,216330,508142,880672,555493,336130,907857,688495,261331,319781,422839,672145,255746,127604,379490,611994,531212,444901,917042,545147,712274,111758,583899,171876,747110,160772,632913,513136,680263,560487,344606,205535,755671,160966,641473,546795,688824,594146,386631,467078,150264,547893,183689,964326,75052,481046,721620,283604,312376,618084,728809,906346,148913,664256,136399,608514,183749,845318,848091,622217,678191,126714,763209,104436,998556,144626,303387,435729,391309,387393,798272,728386,25109,491665,735745,702974,923631,485615,621438,993968,668788,918794,907895,305524,394454,802859,348085,120357,295150,701145,272873,834856,592072,998066,569794,727881,150583,556578,502948,295508,315013,672666,842599,714457,264593,356508,359280,925387,936526,408643,192762,698342,709481,967153,125915,641258,564741,955858,558890,464212,14348,300016,467143,80218,630354,971580,982718,479934,63535,829294,102519,609496,537081,276447,60566,573253,629227,651262,662401,521666,105266,977123,932703,704975,762804,54336,539702,345438,991393,763664,461982,486371,136094,696817,807542,613278,272763,559238,719854,492126,178209,983944,469312,275048,778544,65020,964197,790623,959605,731877,842601,917530,738932,511203,621928,958294,127277,202206,213344,979104,43445,25351,436230,260895,608911,950137,369383,241241,735818,757000,768138,790173,584061,464285,255511,135734,85611,645789,648562,670596,140382,239259,829624,603750,777984,237508,273745,809984,351754,796073,642857,367936,42757,198036,935514,968270,609626,426625,537350,149333,790688,359779,577997,922730,83347,752830,5367,924306,59824,240202,30883,211261,860982,513627,299600,323990,527840,446780,729184,501456,559285,331556,98297,815009,857311,263306,481525,731531,892147,203416,183250,963887,964303,853846,72065,416798,372378,627244,663481,437607,180201,60425,957099,517278,59049,946378,138605,518854,68991,834750,163678,31309,137174,877835,808622,830657,380793,504769,924014,911731,406309,278167,697412,711080,775421,385192,810141,604105,154242,59564,481706,287442,467795,273531,278158,564633,962679,734951,520925,545314,195036,631689,734047,459127,28518,364884,805416,36334,579958,352229,930919,80640,846221,274509,385233,565611,215334,239723,764258,430432,726645,22441,921618,727354,907707,713443,232275,637010,187146,839245,842017,616144,722009,602232,393458,273682,67570,739652,710364,590587,384476,783959,194839,605693,561273,965463,624252,504475,298364,178587,595170,850036,425270,471245,318029,146958,207988,652307,655079,943409,485179,898281,305953,305245,96778,902513,543869,729950,787779,560051,731302,241488,364987,145624,242171,422549,72272,788984,859580,195947,253776,59512,636799,197524,366505,702872,304100,109836,448424,751885,862610,290897,940619,345355,512482,752317,710560,101678,112817,929115,479251,15491,426370,138013,679782,348459,782835,89194,713381,141614,741438,983078,512652,868755,865017,645654,436335,216972,355693,136330,341781,155883,258242,694840,988616,288514,798979,579616,220973,35075,982288,862511,404282,808472,844709,833279,408513,921201,923973,212305,560320,181762,972987,907365,607930,479788,585653,238857,788992,154159,634666,648335,198471,14770,434015,305873,108127,559285,538362,818326,868489,740346,159593,445260,526027,33005,452250,732214,282351,42947,453826,334050,439915,921794,332674,374697,924832,846581,891184,393959,568193,382295,756502,789258,324517,619358,135528,446796,229963,44065,206950,987587,440893,629637,731996,250548,891903,223107,335228,115866,790685,135419,237778,806867,448223,480979,374447,135851,304833,45043,399520,180157,229620,954698,801483,361662,903431,439671,450809,761377,336612,483977,956118,521740,582770,996430,325358,197216,889162,769385,180266,176349,970237,264271,267044,41170,147035,683274,686046,470583,12353,144695,555574,247748,789517,451087,487324,858050,919079,299330,302103,970779,512549,956867,367748,900390,336063,44716,622002,288176,361136,555584,66050,221330,12010,356743,90019,494754,663736,844114,954839,727110,900799,617512,728237,156524,325506,423932,909299,715034,374519,398909,509634,675888,325610,97882,616713,797091,26114,848276,995362,801098,669474,475210,553873,734251,499834,524223,634948,63235,657398,323572,434297,614675,380257,404647,929182,332371,7191,726566,348185,290622,542000,878366,989091,169470,819191,5274,891081,771305,721181,773084,775857,600522,550399,430623,89411,969633,731461,979662,982435,756561,812535,592365,251153,662007,237242,641432,644205,156893,698662,986993,509026,11800,126032,333806,336579,624909,166679,579780,871592,118792,801978,574250,158178,444653,38817,219195,815715,996093,145843,331924,112638,110689,660824,946492,996906,988283,530053,526136,562374,442597,17832,272697,794730,674953,144739,925375,612963,410586,733702,205819,86068,966290,133418,666061,450180,849663,768882,640739,121247,993104,324586,24873,737253,649086,60219,557434,724561,596418,771912,793094,804232,631254,695594,430697,214815,95039,106178,814829,144202,391961,347541,505627,631483,128698,148203,738328,341360,682586,266187,763401,930529,179836,721605,672853,709090,589314,756441,636664,420783,168515,707077,901525,281747,622973,484242,670323,462808,22071,263686,817302,305477,111213,246730,533205,251515,951800,727806,614541,236160,798143,439499,220137,471820,252458,927277,707915,691456,505662,68682,374391,970910,726755,690702,919167,540786,366259,526874,776881,879239,659877,230185,161252,757771,563507,213230,610858,565594,901961,667543,476176,823492,637594,60296,59588,312123,12410,152634,444165,554890,360626,620178,400816,70952,177744,338360,118997,221356,789150,924668,730404,241430,421808,104995,563885,49253,854988,615863,796241,22827,97755,233273,314806,917837,939019,129645,495663,482009,225477,767247,303486,465054,53031,2907,296941,299714,588044,129814,529297,46275,935077,991051,839213,875450,241470,191347,71570,488153,695783,651363,957,411836,292059,833828,233312,539606,5059,845633,335687,556830,893196,436821,355761,360389,696755,969028,993417,574356,609067,283888,283179,173991,518723,53982,334646,648442,815645,350904,756898,267364,680466,630343,102460,294685,916126,457896,746226,486913,148483,836921,825490,244737,259990,21817,902040,312920,693170,617948,434247,853493,735113,285249,657133,456725,892677,69575,91609,397039,177677,392890,491316,495944,782419,417964,198601,709066,278157,599468,254775,251037,490320,131676,58334,791609,597345,218571,398949,418708,774811,310070,443256,545614,795620,552836,897569,664310,436581,400527,524503,318391,676044,826637,488109,418897,591163,232519,577251,24493,123370,73247,633426,424651,804901,248940,684893,70674,730984,781147,640412,215647,87504,426093,729554,148800,57019,345068,740892,282663,562627,993135,181880,284239,472983,164230,459072,91101,232203,281666,687661,813516,538595,213416,994053,620379,653135,82944,50228,46489,453887,39685,476337,491600,157774,338127,413056,80210,901547,851423,66162,105296,35410,985286,117629,908854,445093,525860,921684,184942,745665,582034,92220,611051,171775,253102,681388,852414,32793,743776,80144,84771,965946,82231,748404,2525,938846,65999,627982,254308,34945,723383,302353,812818,812109,767690,303929,714808,241523,191400,704087,857037,292990,251233,755554,141336,785068,899300,665060,438258,874210,318249,223571,609352,14002,972244,408198,670861,12088,92854,378522,481580,502762,583529,863493,126751,591904,516683,126454,327046,195136,634119,555867,600470,880434,649224,934892,602047,972772,33803,478121,269347,49985,497587,402909,450409,449700,703821,892565,44816,98479,692642,873020,99606,341245,990967,282499,393223,729590,316088,619549,254241,814965,676234,236958,500215,891332,578224,508338,813768,188255,113033,548986,348578,253900,270598,558928,529639,306035,750073,186026,233526,332404,282280,726599,137479,169924,711693,329831,740710,620934,788061,449631,485868,790142,494020,568948,729564,971204,559664,365400,631554,652736,577514,499263,918508,422830,628982,381122,286163,525999,549912,168049,365834,645798,828399,108364,261313,813126,370369,650333,225568,728341,522230,190907,601786,184320,600759,448921,703812,523781,326036,606000,511041,447464,561695,327455,859905,781653,987804,494789,286015,846194,43980,36759,365686,703908,282039,380916,13719,194097,860245,191449,340242,751096,700973,461570,872449,740080,845945,514622,992323,451773,245662,964228,375109,993742,795997,20404,406184,778068,222107,922393,407760,699291,28970,209348,786634,919820,367423,928147,694887,213439,909392,992687,580842,861506,910969,255702,521156,801820,997864,708873,352477,880349,369224,461138,472277,738063,177046,3108,888915,707877,882111,734537,393326,280656,230533,276507,162316,767875,311500,583797,289222,469600,169214,710704,831191,542201,691950,997658,144745,816605,643696,832440,186918,590106,492790,616766,2548,530420,892506,288331,349360,523875,811925,339798,289675,949984,752239,934969,831644,233179,824839,361079,771958,185060,234523,284762,231976,420720,799990,519365,666451,422296,557814,268823,284086,464464,681178,705568,710195,835015,484737,921390,945855,350591,408420,744786,371965,299271,779779,801813,845157,371872,321749,595902,440329,206089,630894,66847,85093,660402,499018,934971,728859,594905,969963,158708,621531,966264,975373,382772,713608,274332,550815,887181,358372,433300,490924,827291,382485,780113,853415,466490,371532,438401,232290,900966,311846,378716,172604,957140,9804,764696,253571,781389,192269,636588,441739,374123,435153,181680,520269,856635,375467,555845,460583,805315,917437,323432,372895,372186,98499,131255,91695,747001,373327,718060,147869,180625,433160,144170,482758,229285,804519,200344,757586,193540,754596,813046,615300,151540,473396,559681,665546,834249,245129,549886,756037,160773,419030,831281,881443,80752,491631,246524,8351,827312,238192,273844,595156,269696,255090,330019,437739,462128,139846,320224,198362,165646,56458,497321,702772,917910,428376,835774,321986,996439,407319,914303,400515,936753,574653,10607,815757,261473,680719,815957,765834,210154,399519,679483,104288,150263,455693,644437,271616,460360,881802,662440,337260,549502,556173,211480,746738,466114,849791,377015,777425,909498,171353,168541,805037,810591,874625,161553,80772,235200,977793,494242,619844,384201,764422,705907,410737,523784,629650,980195,857889,996888,102754,99942,291568,222635,161898,3798,270511,209943,373564,304630,668033,89160,316849,192213,312257,5834,789952,472656,173221,106340,954383,985035,221791,218979,578564,493450,441924,383409,869783,7234,511834,859571,564845,183935,206896,73894,145594,551589,35553,561175,337561,860519,571504,150022,103355,34421,324631,751059,649642,582761,291692,111607,927733,181196,831869,408475,404141,122816,46192,979310,523887,490470,782928,908606,6106,108743,383823,250820,922780,476397,465159,770867,967952,741483,196193,383533,547154,478220,305064,822320,579237,829243,215584,57483,941187,816551,699098,566096,802151,840720,797559,482770,892246,949592,130897,591642,808768,921373,621938,563424,453640,759982,674991,236130,772340,224720,662299,866770,765352,814331,514897,561831,258890,926970,80426,428163,547247,428423,180932,642485,870174,745538,512224,379222,867893,401575,458001,668983,144581,457812,406285,923401,185256,118375,818939,760425,136437,394109,398141,455486,52959,331520,695009,973569,969181,155679,38225,905222,412684,623666,671725,633251,830337,353296,180141,111207,439182,517727,284413,346370,910990,487479,795152,775709,999995,128074,377154,15226,628225,229377,36689,938908,551908,90395,819406,632105,908785,257819,653567,397089,384731,290127,613242,11323,188418,562549,32786,945914,763949,356735,664719,262664,199766,237579,200123,146716,967647,188453,481560,776402,934654,839417,210068,256247,455435,667067,349695,732192,16790,929918,541113,79600,67241,873428,173047,873784,918387,292520,340381,714512,565313,723453,460831,53617,197247,931449,825623,37256,272806,563383,502838,415966,372304,152942,404524,309286,660199,292568,663218,302688,382249,295378,385268,817657,521876,123028,805655,611842,780571,378515,732234,800508,399330,777636,773644,247362,496442,845293,478030,902052,536302,254418,656285,24606,611806,494331,637961,634044,352493,734291,159097,641180,269311,182439,652675,132257,491333,125949,244481,921181,534180,490797,453340,499519,644103,586031,824244,206742,441592,562004,555764,190381,795013,293524,664174,948962,553595,674007,456221,305281,921249,134141,675910,277062,155399,862647,155755,157907,989559,844882,312617,325331,782342,695470,792461,794612,37829,638980,782611,148630,325725,748903,431531,496037,483678,430272,997591,910720,875424,788552,776194,894358,129909,443412,717932,344182,722048,942854,342059,943210,930852,462827,70123,684493,516146,429275,292145,660465,903681,504833,187461,913297,162377,158460,554209,708734,802473,922885,705099,917538,680015,281167,963793,397383,738382,128547,747105,693698,616571,635150,698682,911121,898763,675051,45702,83515,801963,651023,810686,184818,483592,851912,534540,351138,519866,917946,634038,505895,493537,720046,607709,233960,593036,442096,643983,344721,943650,67519,438169,384762,307635,326213,193683,225145,336821,924354,232340,825125,23506,556288,231183,169410,404960,591493,519132,219870,874394,475546,257759,259911,784439,346423,604517,816148,204790,391324,73951,448082,780321,381473,765342,983485,160580,228854,366672,379387,202674,149268,798989,497224,889765,238799,228295,133058,832273,364248,734898,216982,352246,573051,526945,719989,832315,745444,469452,763486,518404,844499,527127,128279,842260,375043,331075,869561,726313,794586,996473,289104,558119,111336,793962,162283,264642,555219,273364,761311,896575,378659,749309,608691,465443,378572,848808,231306,380659,380148,117526,994293,277813,683807,54458,92272,810719,759366,911362,824491,852813,391300,977396,359894,243599,575557,258185,984021,563556,95531,996787,379286,302159,734547,572319,969947,582947,283685,697119,538815,118350,456572,192095,793246,69928,38615,276020,612386,407215,6964,230945,557040,725768,426506,109134,815734,300196,204958,675194,107584,939236,563239,45043,465864,468637,851134,685139,631733,668421,573184,977298,581906,88809,400834,708819,309971,154843,37367,916663,517815,538922,551636,93407,313404,668581,973717,656345,38843,111894,236569,666378,300994,550074,242445,958537,23044,166674,654621,116491,522486,765702,391952,543949,662113,275112,708701,391329,978862,810515,340635,810871,829450,542035,654081,336708,934652,562782,631055,565801,308764,960087,116969,209756,860798,412536,63493,808785,965666,864897,874156,394284,549618,431162,343591,648769,29463,269223,324162,350128,945575,174615,495850,430596,239681,783051,948298,190411,841453,459312,616193,74463,947615,435284,700117,268282,56080,667274,676533,825722,732340,963734,962271,53006,184789,772043,937290,505454,839647,391385,142014,649419,292096,943418,108666,720713,472150,15522,973929,908675,815293,425486,434744,460710,29855,34482,166265,192930,565257,602790,768037,860824,26072,624193,3885,94619,845247,332916,81146,493320,502579,368346,401102,68852,234099,721767,953136,529666,942821,926221,733253,982028,991287,387036,541562,467942,443736,342967,994010,377987,947131,778784,937520,86710,507532,738925,637877,828197,65430,768544,933791,16160,766788,220993,542228,62356,490642,985977,961771,144426,166903,928927,285681,706222,619351,206606,371853,940016,171386,659054,659176,79718,923074,969874,979133,747169,68405,299799,884525,975259,355954,329418,975404,643154,808401,296070,421342,759984,510613,742007,709291,859483,835277,220304,377185,155943,154480,672752,246107,494883,495775,748754,161910,940666,657831,457477,22465,890840,945780,285127,442008,780650,150235,389995,388532,697920,10790,598044,249087,25598,438753,164309,536636,875278,663023,800141,799486,669464,320507,120153,384986,113348,585961,623494,269481,881528,38410,175529,340776,953630,704259,682131,906836,589464,377262,358392,359285,541939,448556,274506,787247,582431,895301,217845,227104,747231,282911,522671,779138,1716,110561,128860,294107,77718,242965,730633,603786,538532,895284,282668,556261,746581,911828,366033,388510,314890,69783,107316,272563,929445,930337,67457,480612,225905,92394,892039,48921,927264,306955,852181,983963,10630,752892,702769,711941,132483,445353,563238,572497,240947,628304,432160,397232,167624,332871,347963,373648,400314,665147,694313,449206,383952,671723,308869,309762,426489,995633,877177,516653,754865,700200,837318,680675,200803,522038,165696,867829,305409,117300,660671,636465,149486,531983,18952,868012,550639,906481,44408,812974,520700,785533,239738,298888,299755,728041,981020,146268,703564,983528,987666,922044,191006,625854,674757,587886,780563,101800,33039,198286,881866,146700,375089,283976,966603,461657,704873,118030,473802,639049,24885,244882,302152,674479,162148,813190,3511,852571,996201,769031,834921,918215,804024,841632,18530,242935,284732,197161,933942,865460,945022,101904,517853,198258,185900,198615,365742,171929,723666,53596,80262,237142,855001,112168,794795,545424,33093,775355,866089,997872,700987,22223,434398,970637,332921,927561,110216,734218,459774,781009,179111,154905,542287,74262,67463,332296,369829,218889,400843,566090,686578,66270,462018,882839,442493,707326,283857,440737,619885,941120,875866,337371,889107,145575,658036,571165,66500,246878,767005,990707,167803,464492,647146,59603,455351,198314,199181,520417,8086,498229,432975,657680,787132,589108,376485,789641,362664,527911,610279,89557,329317,563341,498087,763928,482376,183115,857375,491992,843554,478171,459339,864074,582523,595238,957521,626252,457905,108948,510815,622861,73858,986985,921731,561207,534672,691552,881873,780824,674298,267084,857845,205075,242607,755349,64737,807699,450657,615904,173201,767841,130125,914715,734998,866780,454035,775271,785457,942338,712730,867255,802001,811260,329447,380231,414563,638265,34014,407194,497928,654809,727859,49095,271272,340389,883760,523236,705890,678843,691583,922951,499481,128084,367844,10521,415284,580532,820291,193472,284206,540673,426481,233513,383705,607407,250364,901406,458704,567548,697001,18237,44203,373355,603978,769225,281687,921162,308545,755761,534518,185561,670982,671875,307862,95661,647397,398027,424692,581573,199432,942394,351369,732463,175405,303979,592029,4485,492153,143196,300052,713207,583185,326148,220466,187349,675017,581635,508014,765181,120954,286202,591379,503808,55546,292692,71450,722492,840377,153247,673374,930541,689562,946029,724786,839183,390921,522704,648955,699739,185107,6370,119342,754607,636151,645410,43511,436731,767711,180867,757396,22230,476434,635170,561549,97230,552435,382964,509216,666097,436488,591014,492295,65650,579012,744259,935606,475497,871245,611960,538340,647185,932626,97874,527682,279119,711229,7919,190573,97191,277290,928332,85189,448827,166576,423743,325024,231641,461632,518977,609711,733687,499868,365265,114500,215539,703207,868454,536204,949359,986048,307285,208566,565319,846604,759732,1845,133628,693984,831434,787465,944346,179897,298061,702176,830751,218134,475301,961963,283199,770867,521497,822518,491249,886997,780191,334281,491162,797043,851983,786728,895573,505766,818635,338763,126562,45208,852239,34894,135373,603106,271836,829078,985959,370987,380246,937542,318236,355769,612236,710886,876133,527457,270420,271287,584157,227814,983149,495611,314572,171324,444917,635238,800485,254689,786664,955194,335888,571438,484567,996328,5587,748830,555861,457143,813896,788871,2467,718558,98250,429230,80273,418915,683748,995493,664224,590603,85658,944760,232532,752659,9827,958444,58779,256510,888878,720532,951893,322544,269138,928376,249613,275579,18542,414290,801647,736393,993559,238173,403420,927811,734842,558129,70872,161606,878769,366439,279567,728845,894092,179534,444367,809313,332922,820590,952373,628489,41645,667971,833218,826419,577048,128786,971333,897713,185485,680819,937986,620614,478737,966405,873022,393958,651125,632255,237815,849862,15110,566847,111445,37825,458647,288897,890048,183156,403961,976984,390140,480874,875556,843965,495008,552837,263846,962253,250025,753726,658488,54238,604539,376189,126818,670189,594689,114816,647599,720649,877530,968264,219364,771100,413777,503667,416796,489846,655093,737462,735999,942294,478977,97536,262783,391535,556782,583448,920266,225697,380222,314968,324227,718755,39992,551752,808919,360657,61395,481936,117202,504584,513843,397739,718974,550628,361223,387889,138518,690255,69946,939923,590966,606058,615316,622047,290778,163956,272800,455455,743225,568367,981523,146846,797888,816188,237010,163390,764541,149569,125363,159695,728839,602017,363282,512471,833707,658848,72005,739754,147153,290783,803524,573915,619890,819078,175832,588007,127897,446012,359141,714913,880161,381048,871047,291588,960318,215210,121827,679124,280276,923232,574275,600941,567824,605356,118099,888489,539532,405299,414558,934685,503830,265855,420954,759596,990965,708154,277299,311631,806685,824984,837699,172186,253119,492879,814114,582150,183302,726673,991506,416312,541583,341229,342121,978108,27993,9124,18382,686831,310835,550594,457212,606401,615660,849406,974225,549911,266625,754293,175115,181846,538599,420143,733012,855668,268824,306357,381737,564391,976847,858391,115559,116426,175576,49810,337581,272327,973064,258506,415387,293730,81529,218647,383894,107903,854872,406609,405147,183904,315687,214919,27761,290067,703222,942982,801105,139748,271531,610876,524005,136053,292934,844671,843208,588501,753748,606923,763804,807455,95227,960344,333524,7786,272619,52330,965457,576653,489782,314923,314269,405003,449923,9577,274410,365144,264096,3626,810656,993311,174141,725878,238620,494806,660053,525821,691068,171067,584223,127594,202974,385628,192660,687994,334935,11051,176298,630502,189539,524026,3303,243063,894105,332335,464117,695511,227486,840341,706830,258568,671723,320186,641421,245103,465908,548277,335267,317205,789818,210360,531595,85386,242267,333001,83630,571298,802667,370831,59603,793321,958568,570615,727496,745796,652413,587159,810861,200099,512969,341045,350304,746052,900578,801859,802752,619383,159273,285525,417308,960678,827167,853833,493309,636939,379902,405868,727103,856556,551590,486336,756722,988115,87838,370078,865131,719636,507434,927975,36821,836465,183695,65239,386475,96254,105512,526053,211318,763055,605604,100182,631705,82927,889957,924289,181457,699729,441992,468657,108134,989677,558822,709013,195702,476087,226716,5474,927221,414890,546673,736993,150149,91151,404021,553210,147851,166150,331397,521718,164395,751649,291539,115977,82860,126204,138919,651380,816627,54140,797102,823068,144304,273757,928437,863183,432328,249103,414350,819114,984361,224122,145871,172536,519765,71502,814464,840430,161667,771858,366499,301245,411043,898711,219948,992690,643733,983079,362770,257089,851729,237564,502397,758584,171740,938923,70706,97372,848000,391371,233920,135202,456437,951771,694734,621114,92496,580164,453317,379696,636863,617993,939229,188005,197264,740635,855032,633789,970607,402718,310143,821904,79072,923498,766047,700793,714904,110654,954009,474137,795373,382628,25305,82574,595316,835076,486119,6744,163625,502970,364157,734807,991274,134905,977453,912198,233435,366525,523406,99937,612678,852438,189257,527899,473233,132473,297720,382386,8637,26936,933553,923857,922394,474132,475025,723800,530832,926580,399194,300475,198726,686394,851641,527758,659540,670033,991268,892550,850959,402696,559577,171625,303407,954730,742528,163070,519823,63195,228442,79098,244345,381464,922954,343496,764318,251987,377258,303638,872781,555962,565220,333256,654492,885885,365163,455897,106941,224826,825977,415834,828989,68750,975367,124557,225036,276800,408582,84699,249946,737614,343618,122376,635117,153390,318637,930684,641694,981039,879991,970725,806493,260697,319847,320714,889858,715000,871881,210524,547342,787102,415704,992234,149116,670844,836091,786419,988028,742946,7780,50872,60131,827314,207005,562778,728025,527671,278300,23593,436748,79705,487103,526988,692235,923628,922166,979435,713638,231911,645066,840,166087,965732,954970,733727,732264,275636,284895,465247,208210,695178,16415,199069,876104,427842,940583,196770,362017,227785,393032,702420,544969,88340,954828,981494,292763,623743,36899,713014,878261,332466,753287,165463,422630,33825,427045,461377,718544,966364,635095,569841,164482,256817,899493,357138,356483,493601,502860,685514,802419,946049,767312,237549,44580,714230,279219,213964,335025,730774,262857};
}
 
class ArrayS{
  static int [] S = {3007,1115,803,1392,3989,2774,2709,1626,3099,658,3978,3230,1724,2218,2030,1614,3043,2663,750,865,1490,1990,3436,746,1828,2620,4,3975,2088,1496,587,2728,156,2068,1863,2479,1738,2003,3685,853,1418,2025,1328,912,1301,2646,3286,3779,721,2171,3600,2656,1639,601,2186,2028,3005,2731,1884,1468,3924,3202,2504,2264,2476,3082,1310,789,2692,2312,1447,2823,760,1912,3577,3056,1732,2128,92,3316,1966,1835,3087,713,1127,194,428,3591,1063,119,1899,2856,3939,2689,2695,2279,2316,3661,1148,427,3445,2467,3789,1205,2322,1945,31,3484,3,3791,2741,2502,615,2333,2673,1282,1958,3689,695,315,2735,2049,973,3758,242,388,1993,3267,33,648,2629,2399,2813,3877,1418,2280,3363,2560,2100,1298,1766,2143,265,881,97,1275,2834,2419,1131,153,2700,3174,433,1707,3030,2756,1070,3848,1389,2004,2559,3834,1815,2572,1999,2359,2058,1466,1985,3199,1443,370,1487,2409,2792,2236,877,3898,2020,2636,3754,2986,2491,1724,531,2539,520,1583,2253,1416,1421,3863,945,3695,2786,2512,2952,473,2577,1292,452,3332,725,1999,2765,2043,1503,2655,2700,2179,3045,846,1436,327,191,3354,3813,1650,759,462,1227,2502,3385,2864,1988,641,2184,2800,3354,628,2232,1676,272,3550,1109,1910,23,3431,1518,2169,3251,2449,1989,158,1276,2243,3784,3404,1518,927,2873,3876,747,1257,2425,3014,132,3778,2518,2102,2183,1627,691,170,1394,2045,3991,430,1513,1133,224,3079,1746,1119,2794,3857,975,3382,1486,1434,558,3614,1184,2563,3224,2044,1979,3114,209,3231,3394,1616,2734,149,813,1525,2643,3258,817,543,2550,2276,240,1032,2114,2624,288,3767,2021,1641,3165,2153,398,3490,2572,2156,3274,3890,1995,2601,3728,546,2114,674,1193,2548,494,3692,2368,397,2519,3063,40,656,2761,2380,635,114,1164,1613,3277,306,2015,1494,2718,3368,1572,3238,885,364,203,3225,343,958,2940,2313,462,683,3836,3561,2513,3437,1418,3633,2241,1483,434,3807,1956,1541,3663,278,1396,2318,3553,722,2085,862,2571,3740,3663,445,1916,2989,212,3128,2809,2007,2948,3601,1089,620,1139,2098,1189,1806,3190,2836,1269,677,3097,1875,632,217,2365,2091,55,705,1576,2227,103,267,304,3748,3331,3517,3860,3093,2387,1831,3089,3705,1669,2064,2840,997,2520,1482,254,3663,1320,2383,1955,3263,1350,3608,3084,2140,1136,721,3317,2102,3590,1428,1887,2458,352,862,1944,465,41,3712,3995,3756,3057,2124,2678,3954,1935,1632,2609,3224,1470,949,2851,2330,3354,532,875,460,3754,3198,104,720,2842,3458,435,3948,3039,2001,421,182,1469,2920,3264,3765,1517,267,1718,2448,3736,1608,2268,1089,1290,769,833,2832,2064,2540,768,3571,1933,3102,3411,422,2027,3301,3716,332,3986,3394,3913,548,3867,2890,1038,764,3117,1928,735,3968,3316,3712,2362,3074,335,986,1149,3288,3246,3483,1598,1077,309,2383,1154,774,1780,2791,1388,666,2554,3898,3724,3308,3683,3614,696,3753,3434,2702,2580,3125,1106,831,2980,3780,1304,758,3601,3434,863,2031,2903,3185,956,2793,2689,2335,3129,158,2719,2032,3785,1649,3659,2609,2263,543,817,1996,877,128,3554,3924,2945,320,2469,1552,293,1234,3303,1863,1544,460,1683,437,1078,1572,3286,3664,2773,3714,1538,771,2330,3509,2439,155,2242,1440,3291,2875,2476,1613,3489,3109,2578,1635,408,2130,1784,3923,462,1112,3484,90,1217,837,261,3575,1662,1035,3016,3561,679,1295,1190,1586,122,3319,2974,1759,3818,3767,1309,2321,531,1331,3861,724,3073,1832,1126,631,633,253,3467,541,3488,77,2454,1265,3792,3517,2670,1570,3990,3232,2394,1556,268,3334,735,1527,2469,3120,451,1795,2490,2967,3019,3513,2074,1553,2699,3500,617,1233,2256,3330,3850,1160,3548,164,43,554,2640,3370,347,1667,3226,3814,27,121,3635,2218,304,3951,1353,2204,2874,3796,1339,2412,3073,2552,1810,1078,1949,2538,2395,1276,1920,2509,1929,2379,438,888,2552,3229,453,1104,3067,3780,239,1512,3071,3706,84,2098,2322,1907,55,3569,1550,1928,605,3521,1748,1679,1050,634,1323,2808,1053,3980,2084,526,3176,2198,1914,2911,3887,3050,2608,2368,438,3750,2824,2372,2656,106,2070,1983,2915,3216,1303,7,922,542,459,3280,1508,1092,457,3478,384,1000,3122,274,793,3376,2538,1957,412,2937,1370,1131,325,2864,2501,1206,3882,2939,832,2010,2565,3700,767,3894,2149,1418,1211,233,833,1966,3877,493,1470,1195,3628,3036,1808,770,2856,3955,3597,1012,2475,2133,1151,1434,3169,2789,1043,522,2187,3260,3586,508,2631,3246,505,2771,2566,1623,1906,3356,879,3841,2613,959,2483,1585,216,3413,2198,1475,1723,1987,1681,2059,2790,2196,2320,1904,500,3638,2729,2138,3079,2957,3296,3674,345,3507,3389,1252,3902,2852,2427,1450,257,3043,2626,2105,220,3276,1292,1802,593,3615,1385,2564,2583,1403,1272,2757,2864,140,1681,2543,3625,373,2319,2899,3981,782,2034,1408,74,1635,2276,1097,1545,2697,468,1083,3874,2790,1909,966,3737,3051,1931,1375,3523,2564,2763,625,3432,1605,953,3799,741,1532,3619,3239,1308,2099,3852,3226,1024,2368,631,2994,1688,1619,3670,2550,989,1640,3727,3347,1601,378,2181,3027,4,3534,2390,1640,3587,2973,2750,3880,997,3808,3383,96,3522,842,3934,2990,3509,723,2810,1866,3981,1150,2060,1117,3326,189,2064,1543,3798,3418,2157,1742,3890,3263,190,1501,2442,981,1198,3060,143,40,1821,2919,3299,513,2054,195,2282,1302,105,3689,2708,2638,866,3782,2366,1168,250,3150,2133,1190,2759,3207,2719,2632,542,126,2275,1175,599,360,643,2094,2317,106,1188,1628,3574,1024,1422,2601,160,3321,979,2464,146,2967,1740,3049,451,2858,1085,1595,3138,412,871,456,56,3194,1298,460,18,3215,298,949,586,3431,2270,2787,2135,2162,460,3482,3154,3911,308,1616,2834,3986,189,1367,617,61,1320,1935,3187,1550,358,1140,2682,3333,2107,1586,18,3532,1846,887,5,310,707,1358,3445,3844,594,1551,530,3727,2236,1962,395,3874,1520,2734,399,3878,2669,3284,686,1644,1707,1927,49,665,1783,2935,3800,1093,3407,2615,1371,956,2074,2145,2344,2722,3533,854,535,930,2013,1633,66,212,2457,1384,404,3531,2304,2955,1060,1631,2231,1675,343,3137,1436,1020,3805,1326,3395,2497,1589,609,3277,1781,1997,2745,3169,3899,1880,3440,3362,532,1415,999,3807,283,1983,1426,3653,304,2391,1448,3581,3024,1922,3101,1188,3919,1172,2113,744,3846,2920,2188,838,3130,1137,1227,3877,3039,2570,3327,3724,1049,2805,2003,3085,3456,2688,2273,422,1556,2674,3844,268,1578,3120,3595,2404,1425,657,2940,1749,1679,3626,936,1456,417,3508,923,1241,1971,1608,805,1089,1819,1841,979,1984,1933,1587,1172,1867,2343,1785,703,2745,3756,2019,2591,723,3639,1515,2588,675,189,992,2285,2805,3457,857,2484,3930,3303,2957,2155,129,3185,2840,3455,221,1373,1978,474,2368,3546,2779,2258,2566,3639,970,2244,394,3977,1520,2127,663,71,1595,2597,8,1543,1196,956,1240,1987,1975,1834,2108,3524,1628,70,1153,1083,1106,691,1223,2419,1352,1942,921,1861,3112,3871,3888,1694,812,220,2307,2032,483,68,3086,1590,2109,1951,2928,2982,2583,3931,3161,2813,215,1429,1307,1379,1016,1043,3693,2749,1534,3160,2239,3550,2641,2014,3672,3256,1924,2998,3536,810,2932,2845,104,1026,3810,3430,1658,3802,3017,2636,864,1902,3461,1038,1321,2069,156,807,1889,2267,249,1356,3632,2829,1166,329,2900,3630,1717,2305,2553,3688,2568,2047,3599,3219,2873,3489,3815,632,2859,2131,1268,194,3426,2905,636,2999,2671,3260,132,1205,296,22,3777,1543,652,3719,3456,459,2423,3135,1785,113,2059,2806,1104,2072,3474,994,996,475,3478,692,1774,2011,3079,108,1331,3730,20,3762,1754,986,798,3865,1811,1572,646,3395,2378,3108,431,2952,424,1015,791,3541,2191,1353,2982,3265,2389,1165,398,1576,1919,3054,78,3248,861,446,1347,2499,352,3172,2968,1989,446,3020,3043,3773,152,1155,246,3971,3727,712,1929,2729,3284,347,1653,2400,1735,1666,3788,7,1170,52,3774,3253,805,425,3990,2486,1082,3982,3614,888,1795,2060,41,1104,1502,2716,239,1321,1076,2702,1811,737,615,1970,3231,434,1552,1342,3570,176,2642,2121,3803,938,2875,1774,1339,512,2933,1314,1012,1619,1782,1713,1244,407,1524,2018,1442,483,2491,2005,1113,487,3058,3788,3236,3597,2247,2898,211,1379,3818,2533,1836,1456,3666,2487,1507,3344,931,375,2268,921,3360,2382,1395,3306,3703,99,2441,3382,3937,554,224,3386,1166,434,2521,3251,1822,343,1772,2940,1150,3900,3203,2787,1015,3836,3050,923,713,192,3635,251,1227,1957,3430,19,3569,2580,2814,1855,3968,3236,2310,3603,3922,1125,2526,3036,891,3382,2456,855,185,897,2297,3608,3469,480,2743,3359,1675,55,2925,1560,3297,1436,528,415,1325,2477,1524,424,3794,14,1970,2418,840,3896,1202,2265,352,113,1741,641,2851,230,718,1887,186,451,2221,2951,1583,3982,3636,1097,639,666,180,540,3190,3217,2169,1739,20,671,2758,3488,2155,703,173,902,473,2401,3680,2523,610,3536,2768,2247,3649,2530,1763,2836,694,3594,3969,3899,1056,1645,1106,1581,2119,2726,3083,1965,3393,3955,2969,2201,288,1599,2341,3617,1704,2450,3668,468,1586,2298,1294,1883,551,3501,850,1246,3589,2611,1913,3083,653,237,1422,1007,2576,3746,3824,2847,697,1304,887,3909,1944,2551,138,709,3990,440,3091,1108,2162,2050,1141,1942,1017,1299,250,998,3648,3061,1432,2742,153,1300,3689,982,2699,3290,2381,425,1542,1429,2562,2448,887,1126,573,1373,2898,3348,2386,429,2657,1539,2761,2648,736,1352,232,2019,2575,3164,510,3764,1289,2318,351,940,3028,508,3952,190,2612,2498,2081,3562,1509,2116,1050,3330,1277,690,344,528,1632,690,204,582,3214,3241,2237,305,720,1310,612,2586,2965,893,2339,596,994,1600,1255,3183,3932,1554,839,654,3304,3331,2845,3356,1584,2033,1599,1222,3099,3758,1458,1952,162,1173,423,3349,1365,1815,1117,1724,3856,3743,3521,110,2833,971,64,3121,3110,2996,2344,2704,3681,199,1628,3908,1855,3007,1764,2399,468,1650,1633,2926,3480,71,3048,359,878,1607,462,1069,1607,2178,1974,1781,572,3594,1223,512,2601,2487,2265,404,801,1452,684,1255,1653,2516,1396,981,3085,3579,2670,3734,266,1112,1753,985,60,3680,2113,24,579,2064,3835,3907,2539,2917,2431,3277,1058,3810,3579,28,2449,3250,1568,3918,1443,3460,1990,130,3108,1187,3522,3496,1585,3724,3005,2891,1006,3145,2043,2615,351,940,33,3840,40,770,2172,736,3035,3089,2041,1778,1977,2005,957,675,3308,1588,3854,2134,415,442,3790,3605,3453,183,3135,3883,1830,3640,2574,3110,1057,2985,3118,713,2661,588,1990,2508,1158,2779,163,893,1093,1121,400,841,2927,3851,2591,2830,2467,2820,1912,1799,1928,2517,547,1984,72,3958,451,3661,3299,3185,2981,1120,1676,3156,3095,3333,1070,1659,3004,2890,979,892,2872,2759,206,2344,1845,3844,3270,3719,3604,54,2308,2758,1990,2440,1107,128,3711,3597,3938,3210,2303,2189,839,2626,3461,1248,3336,817,1012,630,2156,2605,2808,244,869,1458,1910,787,2733,3324,3965,344,3628,219,2607,2101,1991,2558,991,2144,3790,239,3471,3983,893,1158,3775,910,3646,2546,961,2113,218,1159,3944,867,1124,2507,2162,3783,866,585,2381,2970,979,1356,2741,669,2968,3346,2342,3090,1599,1977,1051,1686,3790,767,98,548,1665,1885,148,3938,3273,2470,3758,839,3294,2317,961,2623,692,3654,3308,2258,3045,2630,2653,1368,3684,2705,2545,2024,22,3545,2408,2028,2688,3761,2007,2226,2897,3234,1497,3121,3087,3465,2978,2081,150,3770,2861,3266,2218,1592,683,234,114,1635,1178,3999,1383,3149,691,1202,1721,3383,644,1401,2518,2938,1060,1438,2380,2891,556,530,1648,1232,253,1326,1634,2786,250,1524,2642,1005,589,68,2181,3140,1528,2821,3670,1151,102,620,3147,3738,2829,3067,830,2492,3892,1145,3232,191,3120,2493,853,1794,2370,1532,198,833,2357,1977,609,1260,3013,2034,3972,3416,3369,2295,382,2,1781,2414,2239,1683,1495,2111,3088,2250,1949,1217,1736,1891,3414,3175,1711,909,2643,3505,1268,254,3232,2148,1272,444,2127,3612,3508,643,2131,3169,427,3449,3007,1852,2794,2207,2581,1532,1850,3476,877,331,2751,2371,3799,1183,3692,1620,3401,2105,755,340,2958,2437,2270,2859,1996,3025,3333,2953,1386,3224,3707,2492,2656,1678,2348,2726,3065,787,1905,2450,431,3804,2164,1538,629,249,1989,3087,2863,2484,3912,3638,1144,167,3948,721,2183,1206,13,3501,1764,2336,2795,3717,2804,3375,328,1250,3372,1735,526,5,861,1432,2286,2875,3662,233,1492,2108,848,495,909,347,2258,3270,3851,3576,2527,2308,2828,2448,1566,974,1916,2708,795,1234,1631,3046,675,1504,596,549,3641,2567,2374,3447,1112,731,3056,3295,1188,2356,1862,2468,696,219,2639,2259,3476,997,2079,1939,3964,2468,3586,508,2306,1574,346,1047,3999,1414,2039,2795,759,520,2633,2041,3565,3891,305,3724,3606,2769,3790,361,3304,3524,642,226,3362,2982,3642,715,2379,1124,369,3567,2422,3625,40,656,2778,2363,159,3744,2976,2455,1061,118,1853,2135,592,566,2671,1692,3441,921,2182,3458,1913,954,3931,3691,1805,1213,867,1228,1898,709,2550,2788,3905,406,2687,1832,2211,2862,967,1583,2841,2285,1863,1448,3552,3137,2413,1892,1253,2738,648,3364,673,1465,1861,3523,298,2139,1714,665,2344,707,3532,3117,3487,236,2286,1730,1555,3392,1162,3877,1346,1962,3943,389,811,1945,1502,1033,2010,514,2662,3313,2863,3901,1372,851,1221,3058,3630,1111,2334,3151,3310,690,1271,856,3117,1402,174,3277,1573,559,842,725,2750,2476,3223,437,974,75,2514,3129,900,1187,1083,711,2315,2250,2920,2239,229,3427,1089,859,2628,1695,3357,2458,333,74,1236,3289,216,151,732,914,2991,2013,3034,2987,2548,1473,2591,2176,3761,2321,2885,405,942,1058,2061,1259,3205,3856,867,697,2265,405,1663,589,3396,2453,3016,2072,415,508,3587,1601,3993,3049,1961,782,14,3599,1748,3800,3788,2888,3830,3690,1654,1748,3528,2840,57,2460,3482,685,1116,1732,3323,946,2838,2467,3585,507,2461,2203,2627,2950,394,1929,2369,2445,427,3421,486,369,106,3989,2560,595,2505,2010,2174,1134,82,3570,3957,3445,1145,633,1873,733,3614,2255,1848,3115,582,596,3368,494,228,1520,2290,877,2485,3364,3889,1121,749,3318,2600,1259,781,1766,1833,3618,778,2010,71,3159,2128,135,659,1417,3052,273,2651,1888,1481,2748,2648,516,2397,3487,1689,680,967,3274,1010,1890,3068,746,339,3366,2415,1714,1816,2907,68,1335,1568,3804,3432,523,915,699,3128,219,682,1596,3884,1116,2734,211,40,1358,1655,3466,3898,209,733,433,1074,2727,3924,1401,1697,1958,352,1968,2282,1823,780,2608,2482,3800,1559,2826,2981,1615,924,2576,2696,2607,1405,2794,3125,584,2281,92,3859,1090,188,3623,3936,1871,616,1417,3495,1306,882,2130,2460,2019,1310,1361,1551,2799,1879,3549,1627,3368,2166,3555,1659,3330,2445,3693,1736,3195,2522,121,2471,3877,3045,487,941,376,3685,2254,895,1958,3032,280,224,2035,1150,568,864,2270,1438,2529,1589,1709,1159,2038,2228,2234,577,1614,1866,2219,1430,2326,330,3748,589,1136,534,2503,1672,3113,1779,3449,1966,928,2773,2990,1402,3116,3509,985,1971,3623,3373,991,159,3841,172,1490,359,2170,108,1667,1942,3542,3732,751,2466,154,256,2049,1734,3483,3462,2244,304,3789,3276,718,3793,27,173,20,3329,806,556,2491,3547,1235,1319,2567,1753,1591,1764,1446,754,1343,1323,3134,313,1632,2084,601,3910,1351,1682,1241,110,1569,1759,3711,1056,2655,1791,1349,324,2135,1868,3679,1059,3011,2814,643,3318,2718,387,3946,3817,1049,464,2258,3376,1187,496,3914,3240,1192,995,712,3458,1111,3663,1474,660,2896,2629,2511,1820,2314,2627,3858,1361,3076,1813,3183,801,2190,2028,3839,3272,2830,3020,39,3348,613,2700,3948,3275,2833,2918,606,3915,934,2854,682,3920,1221,125,1813,559,3889,202,1355,100,1577,2560,371,3698,1157,890,895,81,1892,1977,2097,790,2601,503,2103,252,2142,430,2241,1533,2659,2409,2106,1397,2997,1287,2728,1615,3303,1714,3667,2817,2304,1044,2732,2181,3623,3514,2949,2258,3841,31,292,3885,1115,3975,1311,620,2555,492,853,179,1990,1722,2970,185,1855,1799,3768,684,1914,2017,3704,1392,2851,3006,413,793,2622,2583,3813,1572,3031,3362,2691,2000,3055,3227,1021,2569,239,3117,3995,3163,3602,3915,3798,2544,337,316,577,3886,1328,1078,583,3751,1545,1664,1082,531,2113,94,1326,72,1760,1632,1893,851,779,177,1970,1279,2756,799,2610,1636,1071,1384,3319,1494,1313,941,2173,1359,2450,192,2003,1039,2727,2320,3727,2895,3775,3403,1197,3871,531,2750,561,2179,3198,3512,1200,298,497,616,3699,2850,2900,3213,690,3436,527,322,442,2783,453,2496,448,1714,3543,3416,735,202,419,636,3564,2310,3787,82,3255,2353,3583,3896,3779,3088,2785,3081,347,3304,1097,3299,987,2746,3645,3861,1302,470,3010,3305,976,91,1339,41,1544,3135,876,819,2208,1394,952,1599,1157,484,1943,1034,3622,661,2682,2591,2008,1089,2900,3090,2789,1517,3538,1546,3357,2296,107,3875,1695,1022,2692,312,2141,1450,1148,1092,2903,2229,1788,1732,2997,2235,2003,2299,251,2197,1545,1876,3528,1076,2324,2514,3406,751,2563,2894,3772,1531,3342,3321,2880,2171,2610,3191,667,3413,2954,3408,3177,2644,314,3362,750,862,2796,3762,3180,2612,2873,3063,3424,2750,3997,2393,3852,3178,2876,2961,631,3958,3657,3460,708,460,2130,2808,496,2609,2615,496,37,2783,259,2134,3963,2498,150,3779,1731,670,229,2490,143,3029,2814,3032,17,2574,3665,3179,1762,1918,3307,3110,243,372,2977,2570,399,1761,3555,1934,3728,2896,2946,3136,508,1870,1249,3292,751,3444,1114,1409,775,3943,1736,1275,754,3484,1313,1045,2292,1619,1318,1842,1382,269,1957,1997,3853,1444,3680,3413,1083,1683,3081,3412,642,3599,866,1021,2409,1172,590,1027,2855,1671,1353,1103,2580,1889,3683,1593,2471,1921,3047,3202,3208,1971,3430,3726,1555,2399,193,3591,1420,729,59,249,1523,288,1747,2730,541,3304,764,1059,635,3944,1738,1277,2965,328,2050,673,2290,53,1389,1843,2043,577,2265,2561,3949,882,2693,3765,3552,2650,443,633,3981,2709,370,3963,1422,326,3744,39,1657,825,813,564,2251,1985,3779,1857,3668,2397,3997,187,3560,1973,3291,3516,1345,2260,3843,3593,1070,379,3919,250,2062,322,2151,1972,3906,3802,1692,1530,3342,2774,2192,1959,3347,2498,98,2176,3829,2716,544,365,47,3356,3026,2864,3954,3404,1092,631,831,140,1616,1912,3913,2396,3978,3729,1206,3794,1605,837,273,3159,952,1265,842,3587,2579,1316,2757,2207,2770,2925,313,3639,871,2289,780,234,1464,1234,3045,2717,404,137,3099,1994,1513,771,3079,2645,3402,1734,3619,3547,1519,1181,2307,1264,3057,3388,3705,2873,3999,436,1895,965,2196,607,2436,1745,1427,43,1836,601,2412,1296,2562,2015,1741,1411,479,2934,2518,3982,3494,612,118,3350,580,3204,1632,1384,2369,3139,571,322,1553,177,1737,2898,2021,2177,2705,3812,2777,1852,2258,3418,2506,567,3366,509,251,2312,953,2254,3318,3421,2061,1628,93,3686,749,1225,243,47,2723,3461,2264,1714,2592,882,2270,1561,3161,1098,2346,1779,3449,3428,158,1073,2796,2757,683,1949,3179,3510,969,260,3960,150,479,3418,1089,840,2651,2854,647,961,537,3494,724,843,2302,3482,1293,1483,2520,1811,2028,2007,3801,2898,2829,1337,3025,2333,3353,3543,3101,2534,3993,112,1360,2398,3858,189,1982,3039,304,432,3850,3177,850,1004,2622,30,1331,1785,2655,2087,3757,3736,71,3646,3025,3065,191,2278,3369,3841,1300,451,1628,3706,1376,456,2268,346,1224,2101,2362,2323,2452,1197,1550,1670,3481,1179,2075,2405,217,3156,3066,1122,2352,1802,3138,1550,3133,751,1999,1442,3130,2016,3246,1307,3136,2445,27,1965,3213,2645,3963,294,88,3239,627,958,1311,2815,45,500,1835,1144,614,804,1841,1133,2803,1022,2481,1632,3021,2999,3897,2547,3795,1486,3297,2765,83,2126,3532,2701,494,384,478,3576,806,996,2596,3635,1587,599,2349,1252,670,1106,2020,1188,3123,1886,3204,419,1667,1751,1660,846,2798,2741,3489,387,2901,627,2438,2716,1373,1546,3128,2437,2531,2053,3908,1271,3099,3413,642,890,2702,2645,2880,1415,3067,3381,998,1914,3636,3404,1074,155,416,588,3953,2699,3851,147,1606,2468,419,521,3921,3230,1200,1003,2251,3465,1136,324,2118,1286,2340,427,1553,844,2092,2071,3883,1157,2968,3158,177,1795,2921,3726,3496,2576,3824,14,1385,1800,3171,3343,820,270,3670,334,3910,2656,379,340,2028,3225,455,645,2246,1537,805,555,2348,2345,174,258,1929,692,698,853,1255,212,1900,1561,2687,1503,1905,997,3778,2612,2170,1004,2252,1112,2905,825,2795,1188,2982,3313,2871,1811,3622,3390,3131,2357,1384,1116,1122,308,2119,2204,3451,1070,3323,1226,3178,2504,3822,3696,3254,723,1814,1581,3181,2472,3931,2010,3821,2338,149,2789,741,3330,3098,2795,465,3545,1356,3320,24,2981,915,1088,970,112,1360,3850,1538,847,2429,2179,1615,1065,2506,1777,799,107,1584,3645,1580,748,2013,2098,1516,842,2230,2385,3774,848,2869,1053,2864,951,2410,2741,2790,1747,2977,1056,2867,1947,3618,2354,3391,2542,282,261,381,3813,1250,667,1758,943,2332,2628,117,3426,411,1483,2609,1900,3852,1790,3529,2680,2238,2146,1590,477,2305,2108,60,1134,2804,2326,137,2900,3117,3456,3322,2085,37,192,101,1688,3341,3672,3465,2616,568,3984,1075,3699,2212,1594,2509,2998,3723,3316,934,3680,3123,3243,1037,2093,3359,3672,3369,2661,472,451,1681,2878,566,528,789,80,1328,560,3995,3445,675,496,898,83,1683,3726,1414,89,1531,153,2105,1080,1297,1029,2506,2930,741,1286,2604,1896,2253,2092,26,2772,3898,3842,1653,2727,1084,923,2462,2986,3269,1777,3429,2527,356,2258,3435,2762,2671,2984,778,3735,1000,3043,3393,2323,3922,788};
}
class GetOpt {

    private String[] theArgs = null;
    private int argCount = 0;
    private String optString = null;

    public GetOpt(String[] args, String opts) {
        theArgs = args;
        argCount = theArgs.length;
        optString = opts;
    }

    // user can toggle this to control printing of error messages
    public boolean optErr = false;

    public int processArg(String arg, int n) {
        int value;
        try {
            value = Integer.parseInt(arg);
        }
        catch (NumberFormatException e) {
            if (optErr)
                System.err.println("processArg cannot process " + arg //NOI18N
                                   + " as an integer"); //NOI18N
            return n;
        }
        return value;
    }

    public int tryArg(int k, int n) {
        int value;
        try {
            value = processArg(theArgs[k], n);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return n;
        }
        return value;
    }

    public long processArg(String arg, long n) {
        long value;
        try {
            value = Long.parseLong(arg);
        }
        catch (NumberFormatException e) {
            if (optErr)
                System.err.println("processArg cannot process " + arg //NOI18N
                                   + " as a long"); //NOI18N
            return n;
        }
        return value;
    }

    public long tryArg(int k, long n) {
        long value;
        try {
            value = processArg(theArgs[k], n);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return n;
        }
        return value;
    }

    public double processArg(String arg, double d) {
        double value;
        try {
            value = Double.valueOf(arg).doubleValue();
        }
        catch (NumberFormatException e) {
            if (optErr)
                System.err.println("processArg cannot process " + arg //NOI18N
                                   + " as a double"); //NOI18N
            return d;
        }
        return value;
    }

    public double tryArg(int k, double d) {
        double value;
        try {
            value = processArg(theArgs[k], d);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return d;
        }
        return value;
    }

    public float processArg(String arg, float f) {
        float value;
        try {
            value = Float.valueOf(arg).floatValue();
        }
        catch (NumberFormatException e) {
            if (optErr)
                System.err.println("processArg cannot process " + arg //NOI18N
                                   + " as a float"); //NOI18N
            return f;
        }
        return value;
    }

    public float tryArg(int k, float f) {
        float value;
        try {
            value = processArg(theArgs[k], f);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return f;
        }
        return value;
    }

    public boolean processArg(String arg, boolean b) {
        // `true' in any case mixture is true; anything else is false
        return Boolean.valueOf(arg).booleanValue();
    }

    public boolean tryArg(int k, boolean b) {
        boolean value;
        try {
            value = processArg(theArgs[k], b);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return b;
        }
        return value;
    }

    public String tryArg(int k, String s) {
        String value;
        try {
            value = theArgs[k];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            if (optErr)
                System.err.println("tryArg: no theArgs[" + k + "]"); //NOI18N
            return s;
        }
        return value;
    }

    private static void writeError(String msg, char ch) {
        System.err.println("GetOpt: " + msg + " -- " + ch); //NOI18N
    }

    public static final int optEOF = -1;

    private int optIndex = 0;

    public int optIndexGet() {
        return optIndex;
    }

    public void optIndexSet(int i) {
        optIndex = i;
    }

    private String optArg = null;

    public String optArgGet() {
        return optArg;
    }

    private int optPosition = 1;

    public int getopt() {
        optArg = null;
        if (theArgs == null || optString == null)
            return optEOF;
        if (optIndex < 0 || optIndex >= argCount)
            return optEOF;
        String thisArg = theArgs[optIndex];
        int argLength = thisArg.length();
        // handle special cases
        if (argLength <= 1 || thisArg.charAt(0) != '-') {
            // e.g., "", "a", "abc", or just "-"
            return optEOF;
        }
        else if (thisArg.equals("--")) {//NOI18N
            // end of non-option args
            optIndex++;
            return optEOF;
        }
        // get next "letter" from option argument
        char ch = thisArg.charAt(optPosition);
        // find this option in optString
        int pos = optString.indexOf(ch);
        if (pos == -1 || ch == ':') {
            if (optErr) {
                writeError("illegal option", ch); //NOI18N
            }
            ch = '?';
        }
        else { // handle colon, if present
            if (pos < optString.length() - 1 && optString.charAt(pos + 1) == ':') {
                if (optPosition != argLength - 1) {
                    // take rest of current arg as optArg
                    optArg = thisArg.substring(optPosition + 1);
                    optPosition = argLength - 1; // force advance to next arg below
                }
                else { // take next arg as optArg
                    optIndex++;
                    if (optIndex < argCount
                            && (theArgs[optIndex].charAt(0) != '-' ||
                            theArgs[optIndex].length() >= 2 &&
                            (optString.indexOf(theArgs[optIndex].charAt(1)) == -1
                            || theArgs[optIndex].charAt(1) == ':'))) {
                        optArg = theArgs[optIndex];
                    }
                    else {
                        if (optErr) {
                            writeError("option requires an argument", ch); //NOI18N
                        }
                        optArg = null;
                        ch = ':'; // Linux man page for getopt(3) says : not ?
                    }
                }
            }
        }
        // advance to next option argument,
        // which might be in thisArg or next arg
        optPosition++;
        if (optPosition >= argLength) {
            optIndex++;
            optPosition = 1;
        }
        return ch;
    }

}
public final class scacmd3 {

  private static InputStream in   = null; // input file 
  private static OutputStream out = null; // output file
  private static final int EOF    = -1;   // end of file
  private static int buffer;              // one character buffer
  private static int N;                   // number of input bits left in buffer
  private static int M;                   // number of output bits left in buffer
  private static int gotIN  = 0;          // got an input file name
  private static int gotOUT = 0;          // got an output file name

  private static String VERSION  = "3.1"; // Release version
  private static int KEY_DIGEST  = 32;    // Cipher Key hash size

  private static int keylen     = 0;             // Chiper key length 
  private static int COUNT      = 0;             // Rubix block count
  private static int Z_SIZE     = 4000;          // Z array size
  private static int S_SIZE     = 4000;          // S array size
  private static byte[] myKey   = new byte[100]; // Ciphertext byte array
  private static byte[] myKeyS  = new byte[100]; // Ciphertext byte array Saved
  private static byte[] shrtKey = new byte[100]; // Short key byte array.
  private static byte[] bytesIN = new byte[100]; // Data in byte array
  private static byte[] bytesOUT= new byte[100]; // Data out byte array

  private static byte[][] TOP = new byte[3][3];  
  private static byte[][] BOT = new byte[3][3];  
  private static byte[][] FNT = new byte[3][3];  
  private static byte[][] LFT = new byte[3][3];  
  private static byte[][] BAK = new byte[3][3];  
  private static byte[][] RIT = new byte[3][3];  

  private static byte[][] myTOP = new byte[3][3];  
  private static byte[][] myBOT = new byte[3][3];  
  private static byte[][] myFNT = new byte[3][3];  
  private static byte[][] myLFT = new byte[3][3];  
  private static byte[][] myBAK = new byte[3][3];  
  private static byte[][] myRIT = new byte[3][3];  

  private static byte   byteOUT;
  private static byte   byteIN;
  private static byte   myByte;

  private static String myOutFile  = null;  // input file name
  private static String myInFile   = null;  // output file name

  private static Console cnsl      = null;  // console object for password


  // don't instantiate
  private scacmd3() { }

  private static void openFile() {
    try {
      if (gotIN == 0) {
        in = new BufferedInputStream(System.in);
      } else {
        File inFile  = new File(myInFile);
        in  = new BufferedInputStream(new FileInputStream(inFile));
      }
      if (gotOUT == 0) {
        out = new BufferedOutputStream(System.out);
      } else {
        File outFile = new File(myOutFile);
        out = new BufferedOutputStream(new FileOutputStream(outFile));
      }
    }
    catch (FileNotFoundException ex) {
      System.err.println("File not found.");
      System.exit(1);
    }
  }

  // XOR two char variables and return byte
  private static Byte XOR(char a,char b){
  int I = 0;
    I = a ^ b;
    return (byte)I;
  } 

private static void blockCipher_E(int c) {
   int is_even = c % 2;
   if ( is_even == 0 ) {
     for (int i = 1; i < c; i++) {
       Bot_Right(); // a
       Top_Right(); // b
       Fnt_Right(); // c
       Rit_Right(); // d
       Bot_Left();  // e
       Top_Left();  // f
       Rit_Right(); // g
       Fnt_Right(); // h
     }
    } else {
     for (int i = 1; i < c; i++) {
       Bot_Left();  // e
       Top_Left();  // f
       Bot_Right(); // a
       Top_Right(); // b
       Fnt_Right(); // c
       Rit_Right(); // d
       Rit_Right(); // g
       Fnt_Right(); // h
     }
   }
 }

 private static void blockCipher_D(int c) {
   int is_even = c % 2;
   if ( is_even == 0 ) {
     for (int i = 1; i < c; i++) {
       Fnt_Left();  // h
       Rit_Left();  // g
       Top_Right(); // f
       Bot_Right(); // e
       Rit_Left();  // d
       Fnt_Left();  // c
       Top_Left();  // b
       Bot_Left();  // a
     }
   } else {
     for (int i = 1; i < c; i++) {
       Fnt_Left();  // h
       Rit_Left();  // g
       Rit_Left();  // d
       Fnt_Left();  // c
       Top_Left();  // b
       Bot_Left();  // a
       Top_Right(); // f
       Bot_Right(); // e
     }
   }
 }


 private static void Rit_Right() {

   myFNT[1][2] = FNT[1][2];
   myFNT[2][1] = FNT[2][1];

   myTOP[1][2] = TOP[1][2];
   myTOP[2][1] = TOP[2][1];

   myBOT[1][1] = BOT[1][1];
   myBOT[2][2] = BOT[2][2];

   myBAK[1][1] = BAK[1][1];
   myBAK[2][2] = BAK[2][2];

   myRIT[1][1] = RIT[1][1];
   myRIT[1][2] = RIT[1][2];
   myRIT[2][1] = RIT[2][1];
   myRIT[2][2] = RIT[2][2];

   RIT[1][1] = myRIT[1][2];
   RIT[1][2] = myRIT[2][1];
   RIT[2][1] = myRIT[2][2];
   RIT[2][2] = myRIT[1][1];

   FNT[1][2] = myTOP[1][2];
   FNT[2][1] = myTOP[2][1];

   TOP[1][2] = myBAK[2][2];
   TOP[2][1] = myBAK[1][1];

   BAK[1][1] = myBOT[1][1];
   BAK[2][2] = myBOT[2][2];

   BOT[1][1] = myFNT[2][1];
   BOT[2][2] = myFNT[1][2];
 }

 private static void Rit_Left() {

   myFNT[1][2] = FNT[1][2];
   myFNT[2][1] = FNT[2][1];

   myTOP[1][2] = TOP[1][2];
   myTOP[2][1] = TOP[2][1];

   myBOT[1][1] = BOT[1][1];
   myBOT[2][2] = BOT[2][2];

   myBAK[1][1] = BAK[1][1];
   myBAK[2][2] = BAK[2][2];

   myRIT[1][1] = RIT[1][1];
   myRIT[1][2] = RIT[1][2];
   myRIT[2][1] = RIT[2][1];
   myRIT[2][2] = RIT[2][2];

   RIT[1][1] = myRIT[2][2];
   RIT[1][2] = myRIT[1][1];
   RIT[2][1] = myRIT[1][2];
   RIT[2][2] = myRIT[2][1];

   FNT[1][2] = myBOT[2][2];
   FNT[2][1] = myBOT[1][1];

   TOP[1][2] = myFNT[1][2];
   TOP[2][1] = myFNT[2][1];

   BAK[1][1] = myTOP[2][1];
   BAK[2][2] = myTOP[1][2];

   BOT[1][1] = myBAK[1][1];
   BOT[2][2] = myBAK[2][2];
 }


 private static void Bot_Right() {
  
  myBOT[1][1] = BOT[1][1];
  myBOT[1][2] = BOT[1][2];
  myBOT[2][1] = BOT[2][1];
  myBOT[2][2] = BOT[2][2];
  
  myFNT[2][1] = FNT[2][1];
  myFNT[2][2] = FNT[2][2];
  
  myLFT[2][1] = LFT[2][1];
  myLFT[2][2] = LFT[2][2];
  
  myBAK[2][1] = BAK[2][1];
  myBAK[2][2] = BAK[2][2];
  
  myRIT[2][1] = RIT[2][1];
  myRIT[2][2] = RIT[2][2];
  
  BOT[1][1] = myBOT[2][2];
  BOT[1][2] = myBOT[1][1];
  BOT[2][1] = myBOT[1][2];
  BOT[2][2] = myBOT[2][1];
  
  FNT[2][1] = myRIT[2][1];
  FNT[2][2] = myRIT[2][2];
  
  LFT[2][1] = myFNT[2][1];
  LFT[2][2] = myFNT[2][2];
  
  BAK[2][1] = myLFT[2][1];
  BAK[2][2] = myLFT[2][2];
  
  RIT[2][1] = myBAK[2][1];
  RIT[2][2] = myBAK[2][2];
  
}
  
private static void Bot_Left() {
  
  myBOT[1][1] = BOT[1][1];
  myBOT[1][2] = BOT[1][2];
  myBOT[2][1] = BOT[2][1];
  myBOT[2][2] = BOT[2][2];
  
  myFNT[2][1] = FNT[2][1];
  myFNT[2][2] = FNT[2][2];
  
  myLFT[2][1] = LFT[2][1];
  myLFT[2][2] = LFT[2][2];
  
  myBAK[2][1] = BAK[2][1];
  myBAK[2][2] = BAK[2][2];
  
  myRIT[2][1] = RIT[2][1];
  myRIT[2][2] = RIT[2][2];
  
  BOT[2][2] = myBOT[1][1];
  BOT[2][1] = myBOT[2][2];
  BOT[1][2] = myBOT[2][1];
  BOT[1][1] = myBOT[1][2];
  
  FNT[2][1] = myLFT[2][1];
  FNT[2][2] = myLFT[2][2];
  
  LFT[2][1] = myBAK[2][1];
  LFT[2][2] = myBAK[2][2];
  
  BAK[2][1] = myRIT[2][1];
  BAK[2][2] = myRIT[2][2];
  
  RIT[2][1] = myFNT[2][1];
  RIT[2][2] = myFNT[2][2];
  
}
  
private static void Fnt_Right() {
  
  myFNT[1][1] = FNT[1][1];
  myFNT[1][2] = FNT[1][2];
  myFNT[2][1] = FNT[2][1];
  myFNT[2][2] = FNT[2][2];
  
  myLFT[1][2] = LFT[1][2];
  myLFT[2][1] = LFT[2][1];
  
  myTOP[2][1] = TOP[2][1];
  myTOP[2][2] = TOP[2][2];
  
  myRIT[1][1] = RIT[1][1];
  myRIT[2][2] = RIT[2][2];
  
  myBOT[1][1] = BOT[1][1];
  myBOT[1][2] = BOT[1][2];
  
  FNT[1][1] = myFNT[2][2];
  FNT[1][2] = myFNT[1][1];
  FNT[2][1] = myFNT[1][2];
  FNT[2][2] = myFNT[2][1];
  
  LFT[1][2] = myBOT[1][1];
  LFT[2][1] = myBOT[1][2];
  
  TOP[2][1] = myLFT[1][2];
  TOP[2][2] = myLFT[2][1];
  
  RIT[1][1] = myTOP[2][2];
  RIT[2][2] = myTOP[2][1];
  
  BOT[1][1] = myRIT[2][2];
  BOT[1][2] = myRIT[1][1];
  
}
  
private static void Fnt_Left() {
  
  myFNT[1][1] = FNT[1][1];
  myFNT[1][2] = FNT[1][2];
  myFNT[2][1] = FNT[2][1];
  myFNT[2][2] = FNT[2][2];
  
  myLFT[1][2] = LFT[1][2];
  myLFT[2][1] = LFT[2][1];
  
  myTOP[2][1] = TOP[2][1];
  myTOP[2][2] = TOP[2][2];
  
  myRIT[1][1] = RIT[1][1];
  myRIT[2][2] = RIT[2][2];
  
  myBOT[1][1] = BOT[1][1];
  myBOT[1][2] = BOT[1][2];
  
  FNT[1][1] = myFNT[1][2];
  FNT[1][2] = myFNT[2][1];
  FNT[2][1] = myFNT[2][2];
  FNT[2][2] = myFNT[1][1];
  
  LFT[1][2] = myTOP[2][1];
  LFT[2][1] = myTOP[2][2];
  
  TOP[2][1] = myRIT[2][2];
  TOP[2][2] = myRIT[1][1];
  
  RIT[1][1] = myBOT[1][2];
  RIT[2][2] = myBOT[1][1];
  
  BOT[1][1] = myLFT[1][2];
  BOT[1][2] = myLFT[2][1];
  
}

  private static void Top_Left() {

   myTOP[1][1] = TOP[1][1];
   myTOP[1][2] = TOP[1][2];
   myTOP[2][1] = TOP[2][1];
   myTOP[2][2] = TOP[2][2];

   myFNT[1][1] = FNT[1][1];
   myFNT[1][2] = FNT[1][2];

   myLFT[1][1] = LFT[1][1];
   myLFT[1][2] = LFT[1][2];

   myBAK[1][1] = BAK[1][1];
   myBAK[1][2] = BAK[1][2];

   myRIT[1][1] = RIT[1][1];
   myRIT[1][2] = RIT[1][2];

   TOP[2][2] = myTOP[1][1];
   TOP[2][1] = myTOP[2][2];
   TOP[1][2] = myTOP[2][1];
   TOP[1][1] = myTOP[1][2];

   FNT[1][1] = myLFT[1][1];
   FNT[1][2] = myLFT[1][2];

   LFT[1][1] = myBAK[1][1];
   LFT[1][2] = myBAK[1][2];

   BAK[1][1] = myRIT[1][1];
   BAK[1][2] = myRIT[1][2];

   RIT[1][1] = myFNT[1][1];
   RIT[1][2] = myFNT[1][2];

  }

  private static void Top_Right() {

   myTOP[1][1] = TOP[1][1];
   myTOP[1][2] = TOP[1][2];
   myTOP[2][1] = TOP[2][1];
   myTOP[2][2] = TOP[2][2];

   myFNT[1][1] = FNT[1][1];
   myFNT[1][2] = FNT[1][2];

   myLFT[1][1] = LFT[1][1];
   myLFT[1][2] = LFT[1][2];

   myBAK[1][1] = BAK[1][1];
   myBAK[1][2] = BAK[1][2];

   myRIT[1][1] = RIT[1][1];
   myRIT[1][2] = RIT[1][2];

   TOP[1][1] = myTOP[2][2];
   TOP[1][2] = myTOP[1][1];
   TOP[2][1] = myTOP[1][2];
   TOP[2][2] = myTOP[2][1];

   FNT[1][1] = myRIT[1][1];
   FNT[1][2] = myRIT[1][2];

   LFT[1][1] = myFNT[1][1];
   LFT[1][2] = myFNT[1][2];

   BAK[1][1] = myLFT[1][1];
   BAK[1][2] = myLFT[1][2];

   RIT[1][1] = myBAK[1][1];
   RIT[1][2] = myBAK[1][2];

  }


  private static void fillBytesOUT() {

    bytesOUT[1] = TOP[1][1];
    bytesOUT[2] = TOP[1][2];
    bytesOUT[3] = TOP[2][1];
    bytesOUT[4] = TOP[2][2];

    bytesOUT[5] = BOT[1][1];
    bytesOUT[6] = BOT[1][2];
    bytesOUT[7] = BOT[2][1];
    bytesOUT[8] = BOT[2][2];

    bytesOUT[9]  = FNT[1][1];
    bytesOUT[10] = FNT[1][2];
    bytesOUT[11] = FNT[2][1];
    bytesOUT[12] = FNT[2][2];

    bytesOUT[13] = LFT[1][1];
    bytesOUT[14] = LFT[1][2];
    bytesOUT[15] = LFT[2][1];
    bytesOUT[16] = LFT[2][2];

    bytesOUT[17] = BAK[1][1];
    bytesOUT[18] = BAK[1][2];
    bytesOUT[19] = BAK[2][1];
    bytesOUT[20] = BAK[2][2];

    bytesOUT[21] = RIT[1][1];
    bytesOUT[22] = RIT[1][2];
    bytesOUT[23] = RIT[2][1];
    bytesOUT[24] = RIT[2][2];

  }

  private static void fillRubix() {

    TOP[1][1] = bytesIN[1];
    TOP[1][2] = bytesIN[2];
    TOP[2][1] = bytesIN[3];
    TOP[2][2] = bytesIN[4];

    BOT[1][1] = bytesIN[5];
    BOT[1][2] = bytesIN[6];
    BOT[2][1] = bytesIN[7];
    BOT[2][2] = bytesIN[8];

    FNT[1][1] = bytesIN[9];
    FNT[1][2] = bytesIN[10];
    FNT[2][1] = bytesIN[11];
    FNT[2][2] = bytesIN[12];

    LFT[1][1] = bytesIN[13];
    LFT[1][2] = bytesIN[14];
    LFT[2][1] = bytesIN[15];
    LFT[2][2] = bytesIN[16];

    BAK[1][1] = bytesIN[17];
    BAK[1][2] = bytesIN[18];
    BAK[2][1] = bytesIN[19];
    BAK[2][2] = bytesIN[20];

    RIT[1][1] = bytesIN[21];
    RIT[1][2] = bytesIN[22];
    RIT[2][1] = bytesIN[23];
    RIT[2][2] = bytesIN[24];

  }

  private static void getBlockCount(String base) {
  try{
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(base.getBytes("UTF-8"));

    String a = String.valueOf(Math.abs((int)hash[0]));
    String b = String.valueOf(Math.abs((int)hash[1]));
    COUNT = Integer.valueOf(a.substring(0,1)) + Integer.valueOf(b.substring(0,1));

  } catch(Exception ex){
    throw new RuntimeException(ex);
  }
  }

  private static void sha256(String base) {
  try{
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(base.getBytes("UTF-8"));

    for (int i = 0; i < hash.length; i++) {
      myKey[i]   = hash[i];
      myKeyS[i]  = hash[i];
    }
  } catch(Exception ex){
    throw new RuntimeException(ex);
  }
  }

  private static void sha256Short(String base) {
  try{
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(base.getBytes("UTF-8"));

    //System.err.println(hash.length);
    for (int i = 0; i < hash.length; i++) {
      shrtKey[i] = hash[i];
    }
  } catch(Exception ex){
    throw new RuntimeException(ex);
  }
  }

  // Implementing Fisher–Yates shuffle
  static void shuffleArray(int[] ar) {
    Random rnd  = new Random();
    for (int i = ar.length - 1; i > 0; i--)
    {
      int index = rnd.nextInt(i + 1);
      // Simple swap
      int a = ar[index];
      ar[index] = ar[i];
      ar[i] = a;
    }
  }

  private static void clearBuffer() {
      if (M == 0) return;
      if (M > 0) buffer <<= (8 - N);
      try { out.write(buffer); }
      catch (IOException e) { e.printStackTrace(); }
      M = 0;
      buffer = 0;
  }

  private static void writeBit(boolean bit) {
      // add bit to buffer
      buffer <<= 1;
      if (bit) buffer |= 1;

      // if buffer is full (8 bits), write out as a single byte
      M++;
      if (M == 8) clearBuffer();
  } 

  private static void fillBuffer() {
  try { 
      buffer = in.read(); 
      N = 8; 
  }
    catch (IOException e) { System.out.println("EOF"); buffer = EOF; N = -1; }
  }

  public static void close() {
  try {
    in.close();
  }
  catch (IOException e) {
    e.printStackTrace();
    throw new RuntimeException("Could not close BinaryStdIn");
  }
  }

  public static void flush() {
    clearBuffer();
    try { out.flush(); }
    catch (IOException e) { e.printStackTrace(); }
  }

  public static boolean isEmpty() {
    return buffer == EOF;
  }

  public static char readchar() {
  if (isEmpty()) throw new RuntimeException("Reading from empty input stream");

    // special case when aligned byte
    if (N == 8) {
      int x = buffer;
      fillBuffer();
      return (char) (x & 0xff);
    }

    // combine last N bits of current buffer with first 8-N bits of new buffer
    int x = buffer;
    x <<= (8-N);
    int oldN = N;
    fillBuffer();
    if (isEmpty()) throw new RuntimeException("Reading from empty input stream");
    N = oldN;
    x |= (buffer >>> N);
    return (char) (x & 0xff);
    // the above code doesn't quite work for the last character if N = 8
    // because buffer will be -1
    }

  public static byte readByte() {
    char c = readchar();
    byte x = (byte) (c & 0xff);
    return x;
  }

  private static void writeByte(int x) {
    assert x >= 0 && x < 256;

    // optimized if byte-aligned
    if (M == 0) {
      try { out.write(x); }
      catch (IOException e) { e.printStackTrace(); }
      return;
    }

    // otherwise write one bit at a time
    for (int i = 0; i < 8; i++) {
      boolean bit = ((x >>> (8 - i - 1)) & 1) == 1;
      writeBit(bit);
    }
    }

  public static void write(byte x) {
     writeByte(x & 0xff);
  }

  public static int randInt(int min, int max) {

      // Usually this can be a field rather than a method variable
      Random rand = new Random();

      // nextInt is normally exclusive of the top value,
      // so add 1 to make it inclusive
      int randomNum = rand.nextInt((max - min) + 1) + min;

      return randomNum;
  }

  // Use environmental VAR for key.
  // Windows:  set CIPHERKEY="f00Bar"
  // UNIX/MAC: export CIPHERKEY=f00Bar
    
  // MAIN LINE LOGIC
  public static void main(String[] args) {
  String cipherKeyString   = null;
  String modifierKeyString = null;
  GetOpt go = new GetOpt(args, "vhedm:p:i:o:");
  ArrayA AA = new ArrayA();
  ArrayZ AZ = new ArrayZ();
  ArrayS AS = new ArrayS();
  ArrayH AH = new ArrayH();
  go.optErr = true;
  int info      = 0;
  int ch        = -1;
  int DEC       = 0;
  int ENC       = 0;
  int gotPW     = 0;
  int gotMOD    = 0;
  int BB0       = 0;
  int BB1       = 0;
  int BB2       = 0;
  int BB3       = 0;
  int BB4       = 0;
  int BB5       = 0;
  int BB6       = 0;
  int BB7       = 0;
  int keyCksum  = 0;


  // process options in command line arguments
  while ((ch = go.getopt()) != go.optEOF) {
    if ((char)ch == 'v') {
      System.err.println("");
      System.err.println("scacmd3.jar version: " + VERSION);
      System.err.println("");
      System.exit(0);
    } else if ((char)ch == 'h') {
      System.err.println("");
      System.err.println("java -jar scacmd3.jar [-v] [-h] [-e|-d] -i inputFile -o outputFile [-p]<cipher key> [-m] <modifier> ");
      System.err.println("cat [type] inputFile | java -jar scacmd3.jar [-v] [-h] [-e|-d] [-p]<cipher key> [-m] <modifier> > outputFile");
      System.err.println("");
      System.exit(0);
    } else if ((char)ch == 'd') {
        DEC = 1;
    } else if ((char)ch == 'e') {
        ENC = 1;
    } else if ((char)ch == 'p') {
        cipherKeyString = go.optArgGet();
        if (cipherKeyString.length() < 6) {
          System.err.println ("ERROR: Key must be 6 or greater characters");
          System.exit(1);
        } else {
          gotPW = 1;
        }
    } else if ((char)ch == 'i') {
        myInFile = go.optArgGet();
        if (myInFile.length() < 1) {
          System.err.println ("ERROR: Invalid input file name.");
          System.exit(1);
        } else {
          gotIN = 1;
        }
    } else if ((char)ch == 'o') {
        myOutFile = go.optArgGet();
        if (myOutFile.length() < 1) {
          System.err.println ("ERROR: Invalid output file name.");
          System.exit(1);
        } else {
          gotOUT = 1;
        }
    } else
        System.exit(1);         // undefined option
  }                             // getopt() returns '?'

  if ( gotPW == 0 ) {
    try {
      cipherKeyString = System.getenv("CIPHERKEY"); // used cipherKey environmental var if set. 
      keylen = cipherKeyString.length();
      if (cipherKeyString != null) {
        if (keylen < 6) {
          System.err.println ("ERROR: CIPHERKEY must be 6 or greater characters");
          cnsl = System.console();
          if (cnsl != null) {
            char[] pwd = cnsl.readPassword("Password: ");
            cipherKeyString = new String(pwd);
          }      
        }
      }
    }
    catch (Exception e) {
      try {
        cnsl = System.console();
        if (cnsl != null) {
          char[] pwd = cnsl.readPassword("Password: ");
          cipherKeyString = new String(pwd);
        }      
        } catch(Exception ex) {
          System.err.println ("ERROR: No CIPHERKEY variable found, use -p.");
          System.exit(1);
        } 
    }
  }
  
  int p   = 0;
  int r   = 0;
  int q   = 0;
  int i   = 0;
  int k   = 0;
  int z   = 1;
  int enc = 0;
  int plainText = 0;

  // Choose -d or -e at this point. 
  if ( ENC == 1 ) {
    if (DEC == 1 ) {
      System.err.println("Choose either -d or -e.");
      System.exit(1);
    }
    enc = 1; // Encrypt the file.
  }
  if (DEC == 1 ) {
    if (ENC == 1 ) {
      System.err.println("Choose either -d or -e.");
      System.exit(1);
    }
    if ( plainText == 1 ) {
      System.err.println("ERROR: File is not scacmd3 ciphertext or invalid pass key.");
      System.exit(1);
    }
    enc = 0; // Decrypt the file. 
  }

  if ( ENC == 0  &&  DEC == 0 ) {
    System.err.println("Choose either -d or -e.");
    System.exit(1);
   }

  // Open inpuit / output files. 
  openFile();
  fillBuffer();
  
  // Shuffle 5 times. 
  if (ENC == 1) {
    shuffleArray(AA.A);
    shuffleArray(AA.A);
    shuffleArray(AA.A);
    shuffleArray(AA.A);
    shuffleArray(AA.A);
  }

  char c = (char)AA.A[0]; byte H1  = (byte) (c & 0xff);
       c = (char)AA.A[1]; byte H2  = (byte) (c & 0xff);
       c = (char)AA.A[2]; byte H3  = (byte) (c & 0xff);
       c = (char)AA.A[3]; byte H4  = (byte) (c & 0xff);
       c = (char)AA.A[4]; byte H5  = (byte) (c & 0xff);
       c = (char)AA.A[5]; byte H6  = (byte) (c & 0xff);
       c = (char)AA.A[6]; byte H7  = (byte) (c & 0xff);
       c = (char)AA.A[7]; byte H8  = (byte) (c & 0xff);
       c = (char)AA.A[8]; byte H9  = (byte) (c & 0xff);

  H1 = XOR((char)H1,(char)H6);
  H2 = XOR((char)H3,(char)H7);
  H3 = XOR((char)H5,(char)H8);
  H4 = XOR((char)H7,(char)H9);
 
  // Get first bytes hash/data
  bytesIN[0] = scacmd3.readByte();
  bytesIN[1] = scacmd3.readByte();
  bytesIN[2] = scacmd3.readByte();
  bytesIN[3] = scacmd3.readByte();

  // Get a 4 diget checksum from cipher key string
  try {
    MessageDigest md = MessageDigest.getInstance("MD5");
    md.update(cipherKeyString.getBytes());
    byte[] digest = md.digest();
    keyCksum = 0;
    String myHash  = "";
    String myHash0 = String.valueOf(Math.abs((int)digest[0]));
    String myHash1 = String.valueOf(Math.abs((int)digest[1]));
    String myHash2 = String.valueOf(Math.abs((int)digest[2]));
    String myHash3 = String.valueOf(Math.abs((int)digest[3]));
    String myHash4 = String.valueOf(Math.abs((int)digest[4]));
    String myHash5 = String.valueOf(Math.abs((int)digest[5]));
    String myHash6 = String.valueOf(Math.abs((int)digest[6]));
    String myHash7 = String.valueOf(Math.abs((int)digest[7]));

    myHash=myHash0+myHash1+myHash2+myHash3+myHash4+myHash5+myHash6+myHash7;

    long num = Long.valueOf(myHash);
    keyCksum = (int)(num % Z_SIZE-2);
    if (keyCksum > Z_SIZE-2) {
      keyCksum = (int)(num % Z_SIZE/2);
    }
    if (keyCksum < 0 ) {
      keyCksum = (int)(num % Z_SIZE/2);
    }

  } catch(Exception ex){
    throw new RuntimeException(ex);
  }

  // Create the cipherKey
  if (DEC == 1) {
    // Decrypt the hash bytes. 

    int nibble0  = (bytesIN[0] << 4) & 0xf0;
    int nibble1  = (bytesIN[0] >>> 4) & 0x0f;

    int nibble2  = (bytesIN[1] << 4) & 0xf0;
    int nibble3  = (bytesIN[1] >>> 4) & 0x0f;

    int nibble4  = (bytesIN[2] << 4) & 0xf0;
    int nibble5  = (bytesIN[2] >>> 4) & 0x0f;

    int nibble6  = (bytesIN[3] << 4) & 0xf0;
    int nibble7  = (bytesIN[3] >>> 4) & 0x0f;

    //System.err.println(nibble0);
    //System.exit(0);

    sha256(cipherKeyString+cipherKeyString);

    bytesIN[0] = (byte)((nibble1 | nibble0));
    bytesIN[1] = (byte)((nibble3 | nibble2));
    bytesIN[2] = (byte)((nibble5 | nibble4));
    bytesIN[3] = (byte)((nibble7 | nibble6));

    String VV = "";
    String ss = cipherKeyString;
    final char[] Chars = ss.toCharArray();
    BB0 = (AH.HH[Chars.length]);

    VV = String.valueOf((int) Chars[0]);
    BB1 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[1]);
    BB2 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[2]);
    BB3 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[3]);
    BB4 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[4]);
    BB5 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[5]);
    BB6 = Integer.parseInt(VV);

    BB0 = AH.HH[BB0];
    BB1 = AH.HH[BB1];
    BB2 = AH.HH[BB2];
    BB3 = AH.HH[BB3];
    BB4 = AH.HH[BB4];
    BB5 = AH.HH[BB4];
    BB6 = AH.HH[BB5];
    BB7 = AH.HH[BB6];

    byte byteIN0 = XOR((char)myKey[BB0],(char)myKey[BB4]);
         byteIN0 = XOR((char)bytesIN[0],(char)byteIN0);

    byte byteIN1 = XOR((char)myKey[BB1],(char)myKey[BB5]);
         byteIN1 = XOR((char)bytesIN[1],(char)byteIN1);

    byte byteIN2 = XOR((char)myKey[BB2],(char)myKey[BB6]);
         byteIN2 = XOR((char)bytesIN[2],(char)byteIN2);

    byte byteIN3 = XOR((char)myKey[BB3],(char)myKey[BB7]);
         byteIN3 = XOR((char)bytesIN[3],(char)byteIN3);
  
    sha256(cipherKeyString+Integer.toString(keyCksum)+cipherKeyString);
  }

  // ENCRYPT only logic.
  if ( enc == 1 ) {
    // Encrypt and write the hash bytes to ciphertext file. 
     sha256(cipherKeyString+cipherKeyString);

    String VV = "";
    String ss = cipherKeyString;
    final char[] Chars = ss.toCharArray();
    BB0 = (AH.HH[Chars.length]);

    VV = String.valueOf((int) Chars[0]);
    BB1 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[1]);
    BB2 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[2]);
    BB3 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[3]);
    BB4 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[4]);
    BB5 = Integer.parseInt(VV);

    VV = String.valueOf((int) Chars[5]);
    BB6 = Integer.parseInt(VV);

    BB0 = AH.HH[BB0];
    BB1 = AH.HH[BB1];
    BB2 = AH.HH[BB2];
    BB3 = AH.HH[BB3];
    BB4 = AH.HH[BB4];
    BB5 = AH.HH[BB4];
    BB6 = AH.HH[BB5];
    BB7 = AH.HH[BB6];

    byte byteOUT0 = XOR((char)myKey[BB0],(char)myKey[BB4]);
         byteOUT0 = XOR((char)H1,(char)byteOUT0);
     int nibble0  = (byteOUT0 << 4) & 0xf0;
     int nibble1  = (byteOUT0 >>> 4) & 0x0f;

    byte byteOUT1 = XOR((char)myKey[BB1],(char)myKey[BB5]);
         byteOUT1 = XOR((char)H2,(char)byteOUT1);
     int nibble2  = (byteOUT1 << 4) & 0xf0;
     int nibble3  = (byteOUT1 >>> 4) & 0x0f;

    byte byteOUT2 = XOR((char)myKey[BB2],(char)myKey[BB6]);
         byteOUT2 = XOR((char)H3,(char)byteOUT2);
     int nibble4  = (byteOUT2 << 4) & 0xf0;
     int nibble5  = (byteOUT2 >>> 4) & 0x0f;

    byte byteOUT3 = XOR((char)myKey[BB3],(char)myKey[BB7]);
         byteOUT3 = XOR((char)H4,(char)byteOUT3);
     int nibble6  = (byteOUT3 << 4) & 0xf0;
     int nibble7  = (byteOUT3 >>> 4) & 0x0f;

    byteOUT0 = (byte)((nibble1 | nibble0));
    byteOUT1 = (byte)((nibble3 | nibble2));
    byteOUT2 = (byte)((nibble5 | nibble4));
    byteOUT3 = (byte)((nibble7 | nibble6));

    scacmd3.write((byte)byteOUT0);
    scacmd3.write((byte)byteOUT1);
    scacmd3.write((byte)byteOUT2);
    scacmd3.write((byte)byteOUT3);

    // Create new hash for file data. 
    sha256(cipherKeyString+Integer.toString(keyCksum)+cipherKeyString);

    // Write the four read in data bytes to ciphertext file. 
    byteOUT = XOR((char)bytesIN[0],(char)myKey[0]);
    scacmd3.write((byte)byteOUT);

    byteOUT = XOR((char)bytesIN[1],(char)myKey[1]);
    scacmd3.write((byte)byteOUT);

    byteOUT = XOR((char)bytesIN[2],(char)myKey[2]);
    scacmd3.write((byte)byteOUT);

    byteOUT = XOR((char)bytesIN[3],(char)myKey[3]);
    scacmd3.write((byte)byteOUT);

  }
  // End ENCRYPT only logic.

  scacmd3.flush();

  if ( enc == 0 ) {
    r = 0;
  }
  if ( enc == 1 ) {
    r = 4; 
  }

  p = 0;
  String v = "";
  String V = "";
  int B    = 0;
  int len  = 0;

  // Get new Bb from array S
  int Bb = keyCksum;
  Bb = AS.S[Bb]; 
  if (Bb >= Z_SIZE-2) { 
    Bb = AS.S[keyCksum]; 
  }

  // Starting index for AZ.Z[z] 
  int s = 0;
  k = AZ.Z[Bb]%(Bb)*(keyCksum);
  if (k <= 0) { 
    k = Bb; 
  }

  while (k >= Z_SIZE-2) {
    k = k - Bb;
    if (k <= 0) { 
      k = Bb; // Infinite loop break. 
    }
  }

  // Set default values for z if overflow.
  if (k >= Z_SIZE-2) { k = Bb; }
  int Ak = AZ.Z[k]%(Bb);

  if (Ak >= Z_SIZE-2) { Ak = k; }

  int Bk = AZ.Z[Ak]%(Bb);
  if (Ak >= Z_SIZE-2) { Bk = Ak; }

  int Ck = AZ.Z[Bk]%(Bb);
  if (Ak >= Z_SIZE-2) { Ck = Bk; }

  z = Bb;

  getBlockCount(cipherKeyString); // Sets the value for COUNT

  // Decrypt the first four bytes. 
  if (enc == 0) {
    byteIN = scacmd3.readByte();
    byteIN = XOR((char)byteIN,(char)myKey[r++]);
    scacmd3.write((byte)byteIN);
    byteIN = scacmd3.readByte();
    byteIN = XOR((char)byteIN,(char)myKey[r++]);
    scacmd3.write((byte)byteIN);
    byteIN = scacmd3.readByte();
    byteIN = XOR((char)byteIN,(char)myKey[r++]);
    scacmd3.write((byte)byteIN);
    byteIN = scacmd3.readByte();
    byteIN = XOR((char)byteIN,(char)myKey[r++]);
    scacmd3.write((byte)byteIN);
  }
  scacmd3.flush();

  i = 1;
  int j = 1;

  // Encrypt Logic
  if (enc == 1) {
  while (!scacmd3.isEmpty()) {
    bytesIN[i] = scacmd3.readByte();
    i++;
    if (i == 25) {
      fillRubix();
      blockCipher_E(COUNT);   // Block encrypt. 
      blockCipher_E(COUNT+1); // Again 
      blockCipher_E(COUNT+2); // Again 
      fillBytesOUT();
      for (j = 1; j < 25; j++) {
        byteOUT = XOR((char)bytesOUT[j],(char)myKey[r++]);
        scacmd3.write(byteOUT);
        if (r == KEY_DIGEST ) {
          sha256Short(String.valueOf(AZ.Z[k]));             // get the sha256 digest.
          myKey[p] = XOR((char)shrtKey[p],(char)AZ.Z[k++]); // change the key every chunk of bytes.
          r = 0;
          if (k >= Z_SIZE-1) {
            myKey[p] = myKeyS[p]; // reset back to orginal.
            if (p++ >= KEY_DIGEST-1 ) {
              p = 0;
            }
            k = AS.S[z]; // get a new starting index for AZ.Z[z]
            if (z++ >= S_SIZE-1) {
              z = 0;
            }
          }
        }
      }
    i = 1;
    scacmd3.flush();
    }
    if (scacmd3.isEmpty()) {
      for (j = 1; j < i; j++) {
        byteOUT = XOR((char)bytesIN[j],(char)myKey[r++]);
        scacmd3.write(byteOUT);
        if (r == KEY_DIGEST ) {
          sha256Short(String.valueOf(AZ.Z[k]));             // get the sha256 digest.
          myKey[p] = XOR((char)shrtKey[p],(char)AZ.Z[k++]); // change the key every chunk of bytes.
          r = 0;
          if (k >= Z_SIZE-1) {
            myKey[p] = myKeyS[p]; // reset back to orginal.
            if (p++ >= KEY_DIGEST-1 ) {
              p = 0;
            }
            k = AS.S[z]; // get a new starting index for AZ.Z[z]
            if (z++ >= S_SIZE-1) {
              z = 0;
            }
          }
        }
      }
    }
  }
  }
  scacmd3.flush();

  // Decrypt logic.
  if (enc == 0) {
  while (!scacmd3.isEmpty()) {
    byteIN = scacmd3.readByte();
    bytesIN[i] = XOR((char)byteIN,(char)myKey[r++]);
    if (r == KEY_DIGEST ) {
      sha256Short(String.valueOf(AZ.Z[k]));             // get the sha256 digest.
      myKey[p] = XOR((char)shrtKey[p],(char)AZ.Z[k++]); // change the key every chunk of bytes.
      r = 0;
      if (k >= Z_SIZE-1) {
        myKey[p] = myKeyS[p]; // reset back to orginal.
        if (p++ >= KEY_DIGEST-1 ) {
          p = 0;
        }
        k = AS.S[z]; // get a new starting index for AZ.Z[z]
        if (z++ >= S_SIZE-1) {
          z = 0;
        }
      }
    }
    i++;
    if (i == 25) {
      fillRubix();
      blockCipher_D(COUNT+2); // Block cecrypt
      blockCipher_D(COUNT+1); // Again
      blockCipher_D(COUNT);   // Again
      fillBytesOUT();
      for (j = 1; j < 25; j++) {
        scacmd3.write(bytesOUT[j]);
      }
      i = 1;
      scacmd3.flush();
    }
    if (scacmd3.isEmpty()) {
      for (j = 1; j < i; j++) {
        scacmd3.write(bytesIN[j]);
      }
    }
  }
  } // if enc
  scacmd3.flush();

  } // End Main
} // End scacmd3 class
